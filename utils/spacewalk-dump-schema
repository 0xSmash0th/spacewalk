#!/usr/bin/perl

use strict;
use warnings FATAL => 'all';

use Getopt::Long ();
use DBI ();

my ($db, $user, $password);

sub usage {
	print "$0: --db=SID --user=USERNAME --password=PASSWORD [ --help ]\n";
	if ($@) {
		exit shift;
	}
	exit;
}

Getopt::Long::GetOptions (
	'db=s' => \$db,
	'user=s' => \$user,
	'password=s' => \$password,
	'help' => \&usage,
) or exit 1;

if (grep { not defined $_ } $db, $user, $password) {
	usage(2);
}

my $dbh = DBI->connect("dbi:Oracle:$db", $user, $password, { RaiseError => 1, FetchHashKeyName => 'NAME_lc' });

print <<'EOS';
\set ON_ERROR_STOP on
EOS
process_sequences($dbh);
process_tables($dbh);
$dbh->disconnect();

exit 0;

sub process_sequences {
	my $dbh = shift;
	my $sth = $dbh->prepare(q!
		select lower(sequence_name) sequence_name, last_number
		from user_sequences
		order by sequence_name
	!);
	$sth->execute();
	while (my $row = $sth->fetchrow_hashref()) {
		print "select pg_catalog.setval('$row->{sequence_name}', $row->{last_number}, false);\n";
	}
}

sub process_tables {
	my $dbh = shift;
	my $tables = $dbh->selectcol_arrayref(q!
		select lower(table_name) table_name
		from user_tables
		where temporary = 'N'
		order by table_name
	!);
	for (@$tables) {
		print "alter table $_ disable trigger all;\n";
	}
	for (@$tables) {
		print "delete from $_;\n";
		print "commit;\n";
	}
	for (@$tables) {
		print "alter table $_ enable trigger all;\n";
	}
}

1;

