diff -up ./src/java/fr/jayasoft/ivy/DefaultDependencyDescriptor.java.fixtestForJDK6 ./src/java/fr/jayasoft/ivy/DefaultDependencyDescriptor.java
--- ./src/java/fr/jayasoft/ivy/DefaultDependencyDescriptor.java.fixtestForJDK6	2006-11-09 16:52:42.000000000 -0500
+++ ./src/java/fr/jayasoft/ivy/DefaultDependencyDescriptor.java	2008-07-11 17:23:31.000000000 -0400
@@ -8,9 +8,8 @@ package fr.jayasoft.ivy;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
@@ -79,9 +78,9 @@ public class DefaultDependencyDescriptor
         if (moduleConfs.length == 1 && "*".equals(moduleConfs[0])) {
             if (dd instanceof DefaultDependencyDescriptor) {
                 DefaultDependencyDescriptor ddd = (DefaultDependencyDescriptor)dd;
-                newdd._confs = new HashMap(ddd._confs);
-                newdd._artifactsExcludes = new HashMap(ddd._artifactsExcludes);
-                newdd._artifactsIncludes = new HashMap(ddd._artifactsIncludes);
+                newdd._confs = new LinkedHashMap(ddd._confs);
+                newdd._artifactsExcludes = new LinkedHashMap(ddd._artifactsExcludes);
+                newdd._artifactsIncludes = new LinkedHashMap(ddd._artifactsIncludes);
             } else {
                 throw new IllegalArgumentException("dependency descriptor transformation does not support * module confs with descriptors which aren't DefaultDependencyDescriptor");
             }
@@ -99,10 +98,10 @@ public class DefaultDependencyDescriptor
     }
     
     private ModuleRevisionId _revId;
-    private Map _confs = new HashMap();
-    private Map _artifactsIncludes = new HashMap(); // Map (String masterConf -> Collection(DependencyArtifactDescriptor))
-    private Map _artifactsExcludes = new HashMap(); // Map (String masterConf -> Collection(DependencyArtifactDescriptor))
-    private Set _extends = new HashSet();
+    private Map _confs = new LinkedHashMap();
+    private Map _artifactsIncludes = new LinkedHashMap(); // Map (String masterConf -> Collection(DependencyArtifactDescriptor))
+    private Map _artifactsExcludes = new LinkedHashMap(); // Map (String masterConf -> Collection(DependencyArtifactDescriptor))
+    private Set _extends = new LinkedHashSet();
     
     /**
      * Used to indicate that this revision must be used in case of conflicts, independently
@@ -282,7 +281,7 @@ public class DefaultDependencyDescriptor
         }
         Collection artifacts = (Collection)artifactsMap.get(moduleConfiguration);
         Collection defArtifacts = (Collection)artifactsMap.get("*");
-        Set ret = new HashSet();
+        Set ret = new LinkedHashSet();
         if (artifacts != null) {
             ret.addAll(artifacts);
         }
@@ -293,7 +292,7 @@ public class DefaultDependencyDescriptor
     }
     
     public DependencyArtifactDescriptor[] getDependencyArtifactsIncludes(String[] moduleConfigurations) {
-        Set artifacts = new HashSet();
+        Set artifacts = new LinkedHashSet();
         for (int i = 0; i < moduleConfigurations.length; i++) {
             artifacts.addAll(Arrays.asList(getDependencyArtifactsIncludes(moduleConfigurations[i])));
         }
@@ -301,7 +300,7 @@ public class DefaultDependencyDescriptor
     }
     
     public DependencyArtifactDescriptor[] getDependencyArtifactsExcludes(String[] moduleConfigurations) {
-        Set artifacts = new HashSet();
+        Set artifacts = new LinkedHashSet();
         for (int i = 0; i < moduleConfigurations.length; i++) {
             artifacts.addAll(Arrays.asList(getDependencyArtifactsExcludes(moduleConfigurations[i])));
         }
@@ -317,7 +316,7 @@ public class DefaultDependencyDescriptor
     }
     
     private DependencyArtifactDescriptor[] getAllDependencyArtifacts(Map artifactsMap) {
-        Set ret = new HashSet();
+        Set ret = new LinkedHashSet();
         for (Iterator it = artifactsMap.values().iterator(); it.hasNext();) {
             Collection artifacts = (Collection)it.next();
             ret.addAll(artifacts);
diff -up ./test/java/fr/jayasoft/ivy/xml/test-write-full.xml.fixtestForJDK6 ./test/java/fr/jayasoft/ivy/xml/test-write-full.xml
--- ./test/java/fr/jayasoft/ivy/xml/test-write-full.xml.fixtestForJDK6	2006-11-09 16:52:16.000000000 -0500
+++ ./test/java/fr/jayasoft/ivy/xml/test-write-full.xml	2008-07-11 16:40:33.000000000 -0400
@@ -24,21 +24,21 @@
 		<dependency org="yourorg" name="yourmodule1" rev="1.1" conf="myconf1->myconf1"/>
 		<dependency org="yourorg" name="yourmodule2" rev="2+" conf="myconf1->yourconf1"/>
 		<dependency org="yourorg" name="yourmodule3" rev="3.1" conf="myconf1->yourconf1,yourconf2"/>
-		<dependency org="yourorg" name="yourmodule4" rev="4.1" conf="myconf2->yourconf1,yourconf2;myconf1->yourconf1,yourconf2"/>
-		<dependency org="yourorg" name="yourmodule5" rev="5.1" conf="myconf2->yourconf1,yourconf2;myconf1->yourconf1"/>
-		<dependency org="yourorg" name="yourmodule6" rev="latest.integration" conf="myconf2->yourconf1,yourconf2;myconf1->yourconf1"/>
-		<dependency org="yourorg" name="yourmodule7" rev="7.1" conf="myconf2->yourconf1,yourconf2;myconf1->yourconf1"/>
+		<dependency org="yourorg" name="yourmodule4" rev="4.1" conf="myconf1->yourconf1,yourconf2;myconf2->yourconf1,yourconf2"/>
+		<dependency org="yourorg" name="yourmodule5" rev="5.1" conf="myconf1->yourconf1;myconf2->yourconf1,yourconf2"/>
+		<dependency org="yourorg" name="yourmodule6" rev="latest.integration" conf="myconf1->yourconf1;myconf2->yourconf1,yourconf2"/>
+		<dependency org="yourorg" name="yourmodule7" rev="7.1" conf="myconf1->yourconf1;myconf2->yourconf1,yourconf2"/>
 		<dependency org="yourorg" name="yourmodule8" rev="8.1" conf="*->*">
-			<include name="yourartifact8-2" type="jar" ext="jar"/>
 			<include name="yourartifact8-1" type="jar" ext="jar"/>
+			<include name="yourartifact8-2" type="jar" ext="jar"/>
 		</dependency>
-		<dependency org="yourorg" name="yourmodule9" rev="9.1" conf="myconf2->default;myconf3->default;myconf1->default">
+		<dependency org="yourorg" name="yourmodule9" rev="9.1" conf="myconf1->default;myconf2->default;myconf3->default">
 			<include name="yourartifact9-1" type="jar" ext="jar" conf="myconf1,myconf2"/>
 			<include name="yourartifact9-2" type="jar" ext="jar" conf="myconf2,myconf3"/>
 		</dependency>
 		<dependency org="yourorg" name="yourmodule10" rev="10.1" conf="*->*">
-			<include name="*" type="*" ext="xml"/>
 			<include name="your.*" type="jar" ext="jar"/>
+			<include name="*" type="*" ext="xml"/>
 			<exclude org="*" module="*" name="toexclude" type="*" ext="*"/>
 		</dependency>
 		<dependency org="yourorg" name="yourmodule11" rev="11.1" conf="*->*"/>
diff -up ./test/java/fr/jayasoft/ivy/xml/XmlModuleDescriptorParserTest.java.fixtestForJDK6 ./test/java/fr/jayasoft/ivy/xml/XmlModuleDescriptorParserTest.java
--- ./test/java/fr/jayasoft/ivy/xml/XmlModuleDescriptorParserTest.java.fixtestForJDK6	2006-11-09 16:52:16.000000000 -0500
+++ ./test/java/fr/jayasoft/ivy/xml/XmlModuleDescriptorParserTest.java	2008-07-11 16:38:18.000000000 -0400
@@ -611,7 +611,7 @@ public class XmlModuleDescriptorParserTe
         
         // confs dep1: conf1->A;conf2->B (mappingoverride = true)
         DependencyDescriptor dd = getDependency(dependencies, "mymodule1");
-        assertEquals(Arrays.asList(new String[] {"conf2", "conf1"}), Arrays.asList(dd.getModuleConfigurations()));
+        assertEquals(Arrays.asList(new String[] {"conf1", "conf2"}), Arrays.asList(dd.getModuleConfigurations()));
         assertEquals(Arrays.asList(new String[] {"A"}), Arrays.asList(dd.getDependencyConfigurations("conf1"))); 
         assertEquals(Arrays.asList(new String[] {"B"}), Arrays.asList(dd.getDependencyConfigurations("conf2")));  
         
@@ -638,7 +638,7 @@ public class XmlModuleDescriptorParserTe
         
         // confs dep2: extra->extra;all-public->all-public (mappingoverride = true)
         dd = getDependency(dependencies, "mymodule2");
-        assertEquals(Arrays.asList(new String[] {"all-public", "extra"}), Arrays.asList(dd.getModuleConfigurations()));
+        assertEquals(Arrays.asList(new String[] {"extra", "all-public"}), Arrays.asList(dd.getModuleConfigurations()));
         assertEquals(Arrays.asList(new String[] {"extra"}), Arrays.asList(dd.getDependencyConfigurations("extra")));  
         assertEquals(Arrays.asList(new String[] {"all-public"}), Arrays.asList(dd.getDependencyConfigurations("all-public")));  
     }
