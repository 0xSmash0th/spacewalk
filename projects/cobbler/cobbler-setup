#!/usr/bin/env python
import inputhandlers  as handler 
from cobbler.yaml import loadFile
from optparse import OptionParser
from Cheetah.Template import Template
from socket import gethostbyname, gethostname
	
def setup_server(answers):
    ask(answers, 'server', 
                'What is the resolvable address/ip of this server [enter for autodiscover]',
                gethostbyname(gethostname()),
                {"required" : False})

def setup_dhcp(answers):
    ask(answers,'enable_dhcp', 
                "Do you want to enable DHCP management[y/n]",
                1,
                 dict(default="y", validators=[handler.yes_no_check()], 
                     transformers=[handler.yes_no_translator()]))
    if answers['enable_dhcp']:
        answers['next_server']= answers['server']
    else:
        answers['next_server']= '127.0.0.1'

    if answers['enable_dhcp']:
    	translators = dict(isc = "manage_isc", dnsmasq = "manage_dnsmasq")
        ask(answers, 'dhcp_module',
				"Which DNS module do you want to use?  [isc/dnsmasq]",
				"manage_isc",
				dict(default="isc", 
					 validators=[handler.enum_check(translators.keys())],
					 transformers=[handler.translator(translators)]
				 ))
    else: 
		answers['dhcp_module'] = "manage_isc"
				
def setup_dns(answers):
    ask(answers,'enable_dns', 
                "Do you want to enable DNS management[y/n]",
                1,
                 dict(default="y", validators=[handler.yes_no_check()], 
                     transformers=[handler.yes_no_translator()]))
    if answers['enable_dns']:
    	translators = dict(bind = "manage_bind", dnsmasq = "manage_dnsmasq")
        ask(answers, 'dns_module',
				"Which DNS module do you want to use?  [bind/dnsmasq]",
				"manage_bind",
				dict(default="bind", 
					 validators=[handler.enum_check(translators.keys())],
					 transformers=[handler.translator(translators)]
				 ))
    else: 
		answers['dns_module'] = "manage_bind"

def setup_remote_config(answers):
    ask (answers, "enable_remote_access", 
		      "Do you want to configure Cobbler for remote access [y/n]",1,
                 dict(default="y", validators=[handler.yes_no_check()], 
                     transformers=[handler.yes_no_translator()]))
    if answers['enable_remote_access']:
        translation = dict (testing = "authn_testing",
						    passthru = "authn_passthru",
						    denyall = "authn_denyall",
						    ldap = "authn_ldap",
						    configfile = "authn_configfile")
        
        ask (answers, "authn_module",
			 "Which authentication module do you want to use[%s]" % "/".join(translation.keys()),
			 "authn_denyall",
			 dict(default="denyall",
				   validators=[handler.enum_check(translation.keys())],
				   transformers= [handler.translator(translation)]))

        translation = dict (allowall = "authz_allowall",
						    ownership = "authz_ownership",
						    configfile = "authz_configfile")

        ask (answers, "authz_module",
			 "Which authorization module do you want to use[%s]" % "/".join(translation.keys()),
			 "authz_allowall",
			 dict(default="allowall",
				   validators=[handler.enum_check(translation.keys())],
				   transformers= [handler.translator(translation)]))        
    else: 
        answers['authn_module'] = "authn_denyall"
        answers['authz_module'] = "authz_allowall"
				
def setup(parser):
    parser.add_option("-a", "--answers-file", dest="file",
                        help="pass in a answers file in yaml format")

def questioner(answers):
    def question(key, *args, **kwargs):
        if key in answers:
            return answers[key]
        answer = handler.ask(*args, **kwargs)
        answers[key] = answer
        return answer
    return question

def ask(answers, key, question, default, kwargs):
    asker = questioner(answers)
    ans = asker(key, question, **kwargs)
    if not ans:
        answers[key] = default
        
def gen_template(template, answers, output):
	t = Template(file=template, searchList=answers)
	open(output,"w").write(t.respond())

def main():
    parser = OptionParser()
    setup(parser)
    answers = dict()
    (options, args) = parser.parse_args()

    if options.file:
        data = loadFile(parser.file).next()
        answers.update(data)
    questions = [setup_server, setup_dhcp, setup_dns, setup_remote_config]
        
    for question in questions:question (answers)
    answers['pxe_once']=0
    answers['yum_post_install_mirror']=0
    print answers
    gen_template("templates/settings.template",answers,"settings")
    gen_template("templates/modules.conf.template",answers,"modules.conf")
    
    
if __name__=="__main__":
    main()
