#!/usr/bin/perl

use strict;
use lib qw(blib/lib);
use lib qw(blib/arch);
use FcntlLock ':all';

#my $LOCKFILE = "/var/tmp/LOCKFILE.$$";
my $LOCKFILE = "/home/buildRelease/archive/LOCKFILE.$$";

# Phase 1 -- parent has shared lock
if (my $pid = fork()) {

  print STDERR "$$ Parent opening file\n";
  open(LOCK, "+>$LOCKFILE") or die "Couldn't open $LOCKFILE: $!";

  &get_shared(\*LOCK, 'parent');

  print STDERR "$$ Parent waiting on child ...\n";
  wait();

  # Parent releases lock
  &release_lock(\*LOCK, 'parent');

  # Close the file so the next child doesn't inherit the descriptor
  print STDERR "$$ Parent closing file\n";
  close(LOCK);

} else {

  # Child
  print STDERR "\t\t\t\t$$ Child sleeping 1 second\n";
  sleep(1);

  print STDERR "\t\t\t\t$$ Child opening file\n";
  open(LOCK, "+>$LOCKFILE") or die "Couldn't open $LOCKFILE: $!";

  &get_shared(\*LOCK, 'child');

  &release_lock(\*LOCK, 'child');

  &get_exclusive(\*LOCK, 'child');

  print STDERR "\t\t\t\t$$ Child closing lockfile\n";
  close(LOCK);

  print STDERR "\t\t\t\t$$ Child exiting\n";
  exit(0);

}




# Phase 2 -- parent has exclusive lock
if (my $pid = fork()) {

  print STDERR "$$ Parent opening file\n";
  open(LOCK, "+>$LOCKFILE") or die "Couldn't open $LOCKFILE: $!";

  &get_exclusive(\*LOCK, 'parent');

  print STDERR "$$ Parent waiting on child ...\n";
  wait();

  # Parent releases lock
  &release_lock(\*LOCK, 'parent');

  # Close the file so the next child doesn't inherit the descriptor
  print STDERR "$$ Parent closing file\n";
  close(LOCK);

} else {

  # Child
  print STDERR "\t\t\t\t$$ Child sleeping 1 second\n";
  sleep(1);

  print STDERR "\t\t\t\t$$ Child opening file\n";
  open(LOCK, "+>$LOCKFILE") or die "Couldn't open $LOCKFILE: $!";

  &get_shared(\*LOCK, 'child');

  &get_exclusive(\*LOCK, 'child');

  print STDERR "\t\t\t\t$$ Child closing lockfile\n";
  close(LOCK);

  print STDERR "\t\t\t\t$$ Child exiting\n";
  exit(0);

}


# Phase 3 -- parent closes locked file, implicitly releasing lock
if (my $pid = fork()) {

  print STDERR "$$ Parent opening file\n";
  open(LOCK, "+>$LOCKFILE") or die "Couldn't open $LOCKFILE: $!";

  &get_exclusive(\*LOCK, 'parent');

  # Close the file
  print STDERR "$$ Parent closing file\n";
  close(LOCK);

  print STDERR "$$ Parent waiting on child ...\n";
  wait();


} else {

  # Child
  print STDERR "\t\t\t\t$$ Child sleeping 1 second\n";
  sleep(1);

  print STDERR "\t\t\t\t$$ Child opening file\n";
  open(LOCK, "+>$LOCKFILE") or die "Couldn't open $LOCKFILE: $!";

  &get_shared(\*LOCK, 'child');

  &release_lock(\*LOCK, 'child');

  &get_exclusive(\*LOCK, 'child');

  &release_lock(\*LOCK, 'child');

  print STDERR "\t\t\t\t$$ Child closing lockfile\n";
  close(LOCK);

  print STDERR "\t\t\t\t$$ Child exiting\n";
  exit(0);

}




print STDERR "$$ Parent exiting\n";
exit(0);



##############################################################################
###############################  Subroutines  ################################
##############################################################################



################
sub get_shared {
################
  my($fh, $which) = @_;
  my $tab;

  if ($which eq 'child') {
    $tab = "\t\t\t\t";
  }

  print STDERR "$tab$$ $which getting shared lock\n";
  my $rv = lock_sh($fh);
  if ($rv == 0) {
    print STDERR "$tab$$\tRV: $rv\n";
  } else {
    print STDERR "$tab$$\tRV: $rv ($!)\n";
  }

}

###################
sub get_exclusive {
###################
  my($fh, $which) = @_;
  my $tab;

  if ($which eq 'child') {
    $tab = "\t\t\t\t";
  }

  print STDERR "$tab$$ $which getting exclusive lock\n";
  my $rv = lock_ex($fh);
  if ($rv == 0) {
    print STDERR "$tab$$\tRV: $rv\n";
  } else {
    print STDERR "$tab$$\tRV: $rv ($!)\n";
  }

}

##################
sub release_lock {
##################
  my($fh, $which) = @_;
  my $tab;

  if ($which eq 'child') {
    $tab = "\t\t\t\t";
  }

  my $rv = lock_un($fh);
  if ($rv != 0) {
    print STDERR "$tab$$ $which releasing lock\n";
    print STDERR "$tab$$\tRV: $rv ($!)\n";
  }

}
