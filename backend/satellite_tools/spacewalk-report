#!/usr/bin/python -u
#
# Copyright (c) 2008 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2 # along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#

import sys
def systemExit(code, msgs=None):
	""" exit with message and code """
	if msgs:
		if type(msgs) not in [type([]), type(())]:
			msgs = (msgs, )
		for msg in msgs:
			sys.stderr.write(str(msg)+'\n')
	sys.exit(code)

try:
	import os
	import csv
except KeyboardInterrupt:
	systemExit(-1, "\nUser interrupted process.")


_LIBPATH = "/usr/share/rhn"
# add to the path if need be
if _LIBPATH not in sys.path:
	sys.path.append(_LIBPATH)

try:
	from server import rhnSQL
	from common import initCFG
except KeyboardInterrupt:
	systemExit(-1, "\nUser interrupted process.")


def processCommandline():
	""" process the commandline """
	try:
		from optparse import Option, OptionParser
	except KeyboardInterrupt:
		systemExit(-1, "\nUser interrupted process.")
	optionsTable = [
		Option('--db', action='store', type="string",
			help='alternative database string (username/password@sid);' \
				+ ' default is default_db from /etc/rhn/rhn.conf'),
	]

	optionParser = OptionParser(option_list=optionsTable)
	optionParser.disable_interspersed_args()
	options, args = optionParser.parse_args()

	return options


if __name__ == '__main__':
	options = processCommandline()

	try:
		initCFG('server')
		rhnSQL.initDB(options.db)
		writer = csv.writer(sys.stdout)

		h = rhnSQL.prepare("""
			select rhnserver.id as server_id, rhnserver.name as profile_name,
				rhnservernetwork.hostname, trim(rhnservernetwork.ipaddr) as ip_address,
				( select login from web_contact where rhnserver.creator_id = web_contact.id ) as registered_by
			from rhnserver,
				(
				select server_id, hostname, ipaddr
				from rhnservernetwork
				where id in (
					select min(id)
					from rhnservernetwork
					group by server_id
					)
				) rhnservernetwork
			where rhnserver.id = rhnservernetwork.server_id (+)
			order by server_id
		""")
		h.execute()
		writer.writerow(map(lambda x: x[0].lower(), h.description))
		row = h.fetchone()
		while row != None:
			writer.writerow(row)
			row = h.fetchone()

	except KeyboardInterrupt:
		systemExit(-1, "\nUser interrupted process.")
	except (rhnSQL.SQLError, rhnSQL.SQLSchemaError, rhnSQL.SQLConnectError), e:
		# really a stub for better exception handling in the future.
		sys.stderr.write("SQL error occurred, traceback follows...\n")
		raise

