#!/usr/bin/python -u
#
# Copyright (c) 2008 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2 # along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#

import sys
def systemExit(code, msgs=None):
	""" exit with message and code """
	if msgs:
		if type(msgs) not in [type([]), type(())]:
			msgs = (msgs, )
		for msg in msgs:
			sys.stderr.write(str(msg)+'\n')
	sys.exit(code)

try:
	import os
	import csv
	from optparse import Option, OptionParser
except KeyboardInterrupt:
	systemExit(-1, "\nUser interrupted process.")


_LIBPATH = "/usr/share/rhn"
# add to the path if need be
if _LIBPATH not in sys.path:
	sys.path.append(_LIBPATH)

sys.path.append('/usr/share/spacewalk')
import reports

try:
	from server import rhnSQL
	from common import initCFG
except KeyboardInterrupt:
	systemExit(-1, "\nUser interrupted process.")


def processCommandline():
	""" process the commandline """
	optionsTable = [
		Option('--db', action='store', type="string",
			help='alternative database string (username/password@sid);' \
				+ ' default is default_db from /etc/rhn/rhn.conf'),
	]

	optionParser = OptionParser( \
		usage="usage: %s [options] [report_name [report_options]]" % sys.argv[0], \
		option_list=optionsTable)
	optionParser.disable_interspersed_args()
	options, args = optionParser.parse_args()

	sys.argv[1:] = args

	return options

def processCommandlineReport(report):
	""" process the commandline options for one report """

	optionsTable = [
		Option('--fields', action='store_true',
			help='show fields of the report'),
		]
	optionParserReport = OptionParser(
		usage="options for report %s" % report,
		option_list=optionsTable,
		)
	options, args = optionParserReport.parse_args()

	return options


if __name__ == '__main__':
	options = processCommandline()

	try:
		if len(sys.argv) > 1:
			report_name = sys.argv[1]
			report_options = processCommandlineReport(report_name)

			try:
				report = reports.report(report_name)
			except(reports.spacewalk_unknown_report):
				systemExit(-4, 'Unknown report [%s].' % report_name)

			if report_options.fields:
				for c in report.columns:
					print c
				sys.exit(0)

			initCFG('server')
			rhnSQL.initDB(options.db)

			writer = csv.writer(sys.stdout)

			h = rhnSQL.prepare(report.sql)
			h.execute()

			db_columns = map(lambda x: x[0].lower(), h.description)
			if db_columns != report.columns:
				systemExit(-3, \
					"Columns in report spec and in the database do not match:\nexpected %s\n     got %s" % ( report.columns, db_columns ))
			writer.writerow(report.columns)

			row = h.fetchone()
			while row != None:
				writer.writerow(row)
				row = h.fetchone()
		else:
			for r in reports.available_reports():
				print r

	except KeyboardInterrupt:
		systemExit(-1, "\nUser interrupted process.")
	except (rhnSQL.SQLError, rhnSQL.SQLSchemaError, rhnSQL.SQLConnectError), e:
		# really a stub for better exception handling in the future.
		sys.stderr.write("SQL error occurred, traceback follows...\n")
		raise

