#!/usr/bin/python
#
#
# Copyright (c) 2008 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
# 
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation. 
#
#
# Debug utility: used to send packaged info created by it's companion
#                script "satelliite-debug"
# Companion utitility: satellite-debug (used prior this utility)
#
# USAGE: send-satellite-debug -f <filename>
#        NOTE: filename is generally: /tmp/satellite-debug.tar.bz2
#
# Author: Chip Turner <cturner@redhat.com>
#

import os
import sys
_LIBPATH = "/usr/share/rhn"
if _LIBPATH not in sys.path:
    sys.path.append(_LIBPATH)

import urlparse
import base64
try:
    from optparse import Option, OptionParser
except ImportError:
    from optik import Option, OptionParser

from rhn import rpclib

from common import rhnLib, initCFG, CFG
from common.rhnLib import parseUrl


initCFG("server.satellite")

DEFAULT_CA_CERT = CFG.CA_CHAIN
DEFAULT_SERVER = parseUrl(CFG.RHN_PARENT) or ['', 'xmlrpc.rhn.redhat.com']
DEFAULT_SERVER = DEFAULT_SERVER[1]
DEFAULT_RPC_PATH = '/WEBRPC/satellite.pxt'

def main():
    optionsTable = [
        Option('-s','--server',   action='store',      help="server to connect to (don't change this)"),
        Option('--http-proxy',    action='store',      help="alternative HTTP proxy to connect to (HOSTNAME:PORT)"),
        Option('--http-proxy-username', action='store',help="alternative HTTP proxy usename"),
        Option('--http-proxy-password', action='store',help="alternative HTTP proxy password"),
        Option('--ca-cert',       action='store',      help="alternative SSL certificate to use"),
        Option('-f','--filename', action='store',      help='file to upload'),
        Option('--no-ssl',        action='store_true', help='turn off SSL (not advisable)'),
    ]
    parser = OptionParser(option_list=optionsTable)
    options, args = parser.parse_args()

    filename = options.filename
    server = options.server or DEFAULT_SERVER
    # fix-up the url.
    parsed = list(parseUrl(server))
    if options.no_ssl:
        parsed[0] = 'http'
    else:
        parsed[0] = 'https'
    parsed[2] = DEFAULT_RPC_PATH
    server = urlparse.urlunparse(parsed)
    sslYN = 1
    if parsed[0] == 'http':
        sslYN = 0
        sys.stderr.write("WARNING: not connecting via SSL\n")

    if not filename and len(args) == 1:
        filename = args[0]

    if not filename:
        print "USAGE: %s --filename <output_filename>" % sys.argv[0]
        sys.exit(0)

    # HTTP PROXY SETTINGS
    http_proxy = http_proxy_username = http_proxy_password = ''
    if options.http_proxy is None:
        # NOTE: this ensures that --http-proxy= still wins
        http_proxy = CFG.HTTP_PROXY
    else:
       http_proxy = options.http_proxy

    if http_proxy:
        if options.http_proxy_username is None:
            http_proxy_username = CFG.HTTP_PROXY_USERNAME
        else:
            http_proxy_username = options.http_proxy_username
        if http_proxy_username:
           if options.http_proxy_password is None:
               http_proxy_password = CFG.HTTP_PROXY_PASSWORD
           else:
               http_proxy_password = options.http_proxy_password

    ca_cert = options.ca_cert or DEFAULT_CA_CERT 

    # whew, we have a filename now, and a server, etc.

    f = open(filename, 'r')
    data = base64.encodestring(f.read())
    f.close()

    rpc_opts = {}
    rpc_opts["uri"] = server
    if http_proxy:
        rpc_opts["proxy"] = http_proxy
        if http_proxy_username:
            rpc_opts["username"] = http_proxy_username
            rpc_opts["password"] = http_proxy_password

    print "Sending debug data, one moment..."
    # flush IO in case it *does* take awhile! :)
    sys.stdout.flush()

    rpcObject = apply(rpclib.Server, (), rpc_opts)
    if sslYN and ca_cert:
        if not os.path.exists(ca_cert):
            sys.stderr.write("ERROR: RHN CA certificate doesn't exist: %s\n" % ca_cert)
            sys.stderr.write("       Please send the tarball to your Red Hat representative directly.\n")
            sys.exit(-1)
        if not os.access(ca_cert, os.R_OK):
            sys.stderr.write("ERROR: don't have read access to the RHN CA certificate: %s\n" % ca_cert)
            sys.exit(-1)
        rpcObject.add_trusted_cert(ca_cert)

    try:
        rpcObject.proxy.send_debug_data(data)
    except:
        proxyString = http_proxy or 'n/a'
        proxyUsernameString = http_proxy_username or 'n/a'
        proxyPasswordString = 'n/a'
        if http_proxy_password:
            proxyPasswordString = '<PASSWORD>'
        usingSSLString = 'no'
        if sslYN and ca_cert:
            usingSSLString = 'yes, cert: %s' % ca_cert
        sys.stderr.write("""
ERROR: an error occured. There may be a problem with the route:

       server URL:          %s
       HTTP proxy:          %s
       HTTP proxy username: %s
       HTTP proxy password: %s
       using SSL:           %s 

       Therefore it is advisable to find another way to send this tarball to
       your Red Hat support representative.

""" % (server, proxyString, proxyUsernameString,
       proxyPasswordString, usingSSLString))
        raise

    print "Debug data sent. Please alert your Red Hat support representatives."


if __name__ == "__main__":
    try:
        sys.exit(main() or 0)
    except KeyboardInterrupt:
        sys.stderr.write("\nUser interrupted process.\n")
        sys.exit(0)

