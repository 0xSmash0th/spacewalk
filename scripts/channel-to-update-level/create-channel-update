#!/usr/bin/python


#author Justin Sherrill jsherril@redhat.com
#version: 2.0-beta
#
#



import getopt
import sys
import getpass
from xmlrpclib import Server
import string
import os
from os import path
from optparse import OptionParser


DATA_DIR = "./data/"
GATHER_DIR = "/mnt/engarchive2/released/"


versions = ( "5", "4", "3", "2.1" );
releases = ( "AS", "ES", "WS", "Server", "Client", "Desktop");
arches = ( "i386",  "ia64",  "ppc",  "s390",  "s390x",  "x86_64");
updates = ("GOLD", "U1", "U2", "U3", "U4", "U5", "U6", "U7", "U8", "U9" );
subrepos = ("VT", "Cluster", "ClusterStorage", "Workstation"); #RHEL 5 yum repos on the discs
extras = ("Extras", "Supplementary"); #things shipped on other cds


bundleSize = None
server = None
user = None
password = None
filename = None
ssl = True
parser = None
clone = False

client = None

def get_args():
   global parser
   parser = OptionParser(usage="""./create-channel-update  -u USER  -s SERVER [-p PASSWORD]  -v VERSION -r RELEASE
                -u UPDATE -a ARCH -e EXTRA  [ -D DATAFILE]  [-c SRCCHAN] -d DESTCHAN [-P PARENT]
                [-C | --clear] [-n | --nossl]""")
   parser.add_option("-n", "--nossl", action="store_false", dest="ssl", default=True, help="disables the use of SSL when connecting to the server")
   parser.add_option("-C", "--clear", action="store_true", dest="clear_channel", help="remove all channel packages from the channel before adding")
   parser.add_option("-s", "--server", action="store", dest="server", help="the server to connect to (i.e.  hostname.domain.com)")
   parser.add_option("-l", "--user", action="store", dest="user", help="the user to connect as")
   parser.add_option("-p", "--password", action="store", dest="password", help="the password to use for the connection (if not specified, will be prompted for)")
   parser.add_option("-v", "--version", action="store", dest="version", help='the version to use (i.e.' + string.join(versions, ', ') +')')
   parser.add_option("-r", "--release", action="store", dest="release", help='the release to use (i.e. ' + string.join(releases, ', ') + ')')
   parser.add_option("-a", "--arch", action="store", dest="arch", help='the arch to use (i.e. ' + string.join(arches, ', ') + ')')
   parser.add_option("-u", "--update", action="store", dest="update_level", help='the update level to use (i.e. ' + string.join(updates, ', ')  + ')')
   parser.add_option("-e", "--extra", action="store", dest="extra", help='the child channel/repo to use (i.e. ' + string.join(extras, ', ') + ')')
   parser.add_option("-D", "--data", action="store", dest="data", help='a data file to use, may use this instead of version, release, update, arch,  and extra')
   parser.add_option("-c", "--sourceChannel", action="store", dest="source_channel", help=' the channel to pull packages from (will be auto detected if not provided)')
   parser.add_option("-d", "--destChannel", action="store", dest="dest_channel", help='the label of the destintation channel to push the packages to (will be created if not existing)')
   parser.add_option("-P", "--parentChannel", action="store", dest="parent_channel", default="", help='if specified, and --destChannel does not exist, --destChannel will be created with this parent')
   parser.add_option("-L", "--clone", action="store_true", dest="clone", default=False, help='if creating destChannel, clone it from the source channel, before adding packages (Satellite 5.1 or newer required)')
   parser.add_option("-g", "--gather", action="store_true", dest="gather", default=False , help='used to gather data files, generally not useful to most people')
   parser.add_option("-b", "--bundle", action="store", dest="bundle", default='50', help='if you are getting "502 proxy" errors, try using a smaller value (default 50)')

   return parser.parse_args()

def validate_options(options):
   error = False


   if not options.server:
      error = True
      print "--server must be specified"

   if not options.user:
      error = True
      print "--user must be specified"


   if not options.data:
      if not options.version:
         error = True
         print "--version must be specified"
      if not options.release:
         error = True
         print "--release must be specified"
      if not options.arch:
         error = True
         print "--arch must be specified"
      if not options.update_level:
         error = True
         print "--update must be specified"


   if  not options.dest_channel:
      error = True
      print "--destChannel must be specified"

   if error:
      sys.exit(1)

def main():


   (options, args) = get_args()


   if options.gather:
      gather(False)
      exit(0)

   validate_options(options)

   global server, user, password, filename, ssl, bundleSize, clone
   server = options.server
   user = options.user
   password  = options.password
   if password == None:
      password = getpass.getpass()
   bundleSize == options.bundle

   #did you provide a data file?  If not we need all the information
   if options.data == None:
      version = options.version
      release = options.release
      update = options.update_level
      arch = options.arch
      extra = options.extra
      filename = getFileName(version,update, release, arch, extra)  
   else:
      filename = option.data
      version, release, update, arch, extra = parseDataFilename(filename)   

   ssl = options.ssl
   clear = options.clear_channel

   if not os.path.exists(DATA_DIR + filename):
      print "Error: data file '" + filename + "' does not exist"
      exit(1)

   parent = options.parent_channel
   clone = options.clone

   newChannelLabel = options.dest_channel
   newChannelLabel = newChannelLabel.lower()
   srcChanLabel = options.source_channel
   if (srcChanLabel == None):
      print "You have not specified a source channel, we will try to determine it from inputs"
      srcChanLabel = findSrcChan(version, release, arch, extra) 
   srcChanLabel = srcChanLabel.lower()

   print("Trying with source channel: " + srcChanLabel)

   #now lets login to the server
   proto = "http"
   if ssl:
      proto = proto + "s"
   client = Server(proto + "://" + server + "/rpc/api")
   if clone and client.api.getVersion() < 5.1:
      print "--clone cannot be used with a Satellite version older than 5.1"
   auth = client.auth.login(user, password)
   populate(client, auth, srcChanLabel, newChannelLabel, filename, parent, clear)


def populate(client, auth, srcChannel, newChannel, filename, parent, clear):
     
   chanList = client.channel.listSoftwareChannels(auth)
  
   src_id = None
   src_label = None
   new_id = None
   arch_label = None
   new_label = None
   for chan in chanList:
      label = getChannelAttr(chan, 'label')
      if label == srcChannel:
         src_label = getChannelAttr(chan, 'label')
         arch_label = getChannelAttr(chan, 'arch')
      elif label == newChannel:
         new_label = getChannelAttr(chan, 'label')
    
   if src_label == None:
      print("Error: Source Channel '" + srcChannel + "' could not be found.")
      exit(1)
   if new_label == None:
      if not clone:
         print("Creating channel, " + newChannel + ", with arch " + arch_label),
         client.channel.software.create(auth, newChannel, newChannel, newChannel, getArchLabel(arch_label, client, auth), parent)
      if clone:
          print("Cloning channel " + srcChannel + " to " + newChannel),
          details_map = { 'name':newChannel, 'label':newChannel, 'summary':newChannel }
          if parent:
             details_map['parent_label'] = parent
          client.channel.software.clone(auth, srcChannel, details_map, True)

      if parent:
         print("with parent " + parent)
   else:
      print("Reusing " + newChannel+ " as destination channel")
   existing_packs = client.channel.software.listAllPackages(auth, srcChannel)
   

   if clear:
      clearChannel(newChannel, existing_packs, client, auth)  
   
   #strip new lines 
   fileList = map(str.strip, open(DATA_DIR + filename).readlines())
   fileList.sort()
   pack_num = 0
   ids_to_add = []

   print(str(len(fileList)) + " packages in source file to push.")  
   
   #for each filename, go through the src package list and find the package id
   for rpm in fileList:
      nvre_to_push = splitFilename(rpm) 
      for src_pack in existing_packs:
         if (nvre_to_push == splitPackage(src_pack)):
            pack_num = pack_num + 1
            ids_to_add.append(getPackageAttr(src_pack, 'id'))
            break
   print("Pushing " + str(pack_num) + " packages, please wait.")

   while len(ids_to_add) > 0:
      print '%d of %d' % (pack_num-len(ids_to_add), pack_num),
      sys.stdout.flush()
      client.channel.software.addPackages(auth, newChannel, ids_to_add[:bundleSize])
      del ids_to_add[:bundleSize]
      print '%s\r' % ' '*20,
      sys.stdout.flush()
      

   print("Sucessfully pushed " + str(pack_num) + " packages out of "+ str(len(fileList)))




def clearChannel(label, packages, client, auth):
      ids_to_remove = []
      print("Clearing channel packages")
      for pack in packages:
         ids_to_remove.append(getPackageAttr(pack, 'id'))
      num_to_remove = len(ids_to_remove)
      while len(ids_to_remove) > 0:
         print '%d of %d' % (num_to_remove-len(ids_to_remove), num_to_remove),
         sys.stdout.flush()
         client.channel.software.removePackages(auth, label, ids_to_remove[:bundleSize])
         del ids_to_remove[:bundleSize]
         print '%s\r' % ' '*20,
         sys.stdout.flush()
      print("Finished clearing channel")



def getArchLabel(archName, client, auth):
   arches = client.channel.software.listArches(auth)
   for arch in arches:
      if getArchAttr(arch, 'name') == archName:
         return getArchAttr(arch, 'label')


def splitPackage(map):
#   return [ getPackageAttr(map, 'name'), getPackageAttr(map, 'version'), getPackageAttr(map, 'release'), getPackageAttr(map, 'arch_label')]
    return '-'.join([getPackageAttr(map, 'name'), getPackageAttr(map, 'version'), getPackageAttr(map, 'release'), getPackageAttr(map, 'arch_label')])

def splitFilename(filename):
   per = filename.split('.')
   together = '.'.join(per[:-2]) + '-' + per[-2]
#   return together.split('-')
   return together
   


def getAttr(map, base, attribute):
   label = map.get(attribute)
   if label == None:
      label = map.get(base + attribute)
   return label

def getPackageAttr(map, attribute):
   return getAttr(map, 'package_', attribute)

def getChannelAttr(map, attribute):
   return getAttr(map, 'channel_', attribute)

def getArchAttr(map, attribute):
   return getAttr(map, 'arch_', attribute)

#returns tuple (version, release, update, arch, extra)
def parseDataFilename(file):
   file = file.lower()
   split = string.split(file, '-')
   if len(split) == 4:
      return (split[0], split[2], split[1], split[3], None) 
   else:
      return (split[0], split[2], split[1], split[3], split[4])

def findSrcChan(version, release, arch, extra = None):
   low_release = release.lower() 

   if version == "2.1":
      if low_release == "as":
        return "redhat-advanced-server-2.1"
      if release == "es":
         return "redhat-ent-linux-i386-es-2.1"
      if release == "ws":
         return "redhat-ent-linux-i386-ws-2.1"
   #if we don't have a subrepo/extras we're done
   if extra == None:
      return "rhel-%s-%s-%s" % (arch, low_release, version)
   else:  #else we do, so lets process that
      low_extra = extra.lower()
      if low_extra == "extra":
          return  "rhel-%s-%s-%s-%s" % (arch, low_release, version, low_extra)
      else:
          return "rhel-%s-%s-%s-%s" % (arch, low_release, low_extra, version )

#this function has no real use outside of red hat
def gather(clear):
   if clear:
      os.system("rm -rf " + DATA_DIR)

   if not path.isdir(DATA_DIR):
      os.mkdir(DATA_DIR)

   for version in versions:
      for update in updates:
         for release in releases:
            for arch in arches:
               if float(version) <= 4:
                  repoDir = "RHEL-%s/%s/%s/%s/tree/" % (version, update, release, arch)  
                  fullDir = GATHER_DIR + repoDir
                  saveRpmList(fullDir +  "RedHat/RPMS/", DATA_DIR + getFileName(version, update,release, arch))
                  #save extras
                  suppl = extras[0]
                  repoDir = "RHEL-%s-%s/%s/%s/%s/tree/" % (version, suppl, update, release, arch)
                  fullDir = GATHER_DIR + repoDir 
                  saveRpmList(fullDir +  "RedHat/RPMS/", DATA_DIR + getFileName(version, update,release, arch, suppl))
               else:
                  repoDir = "RHEL-%s-%s/%s/%s/os/" % (version, release, update, arch) 
                  fullDir = GATHER_DIR + repoDir
                  saveRpmList(fullDir +  release + "/", DATA_DIR + getFileName(version, update,release, arch))
                  #now lets handle the other repos:
                  for subrepo in subrepos:
                     saveRpmList(fullDir +  subrepo + "/", DATA_DIR + getFileName(version, update,release, arch, subrepo))
                  #do supplementary
                  suppl = extras[1]
                  extraDir = "RHEL-%s-%s-%s/%s/%s/os/%s/" % (version, release, suppl, update, arch, suppl)
                  fullDir = GATHER_DIR + extraDir
                  saveRpmList(fullDir + "/", DATA_DIR + getFileName(version, update,release, arch, suppl))

def saveRpmList(directory, filename):
   if path.exists(directory) and not path.exists(filename):
      os.system("ls " + directory + " | grep rpm | sort > " + filename);

def getFileName(version, update, release, arch, additional=None):
   if additional == None:
    return "%s-%s-%s-%s" % (version, update.lower(), release.lower(), arch)
   else:
      return "%s-%s-%s-%s-%s" % (version, update.lower(), release.lower(), arch, additional.capitalize())


def help():
   usage()
   print """
Examples
-------

Create channel 'my-stable-channel' for RHEL 4 AS u3 i386:
./create-channel-update  -l admin -s myserver.example.com -v 4 -u u3 -r AS -a i386   -d my-stable-channel

or another way:
./create-channel-update  -l admin -s myserver.example.com  -D ./data/4-U3-AS-i386  -d my-stable-channel

Upgrade prevously created channel 'my-stable-channel' to RHEL 4 AS u4 i386: 
./create-channel-update  -l admin -s myserver.example.com -v 4 -u u4 -r AS -a i386   -d my-stable-channel

Add the extra's channel as a child channel of 'my-stable-channel':
./create-channel-update  -l admin -s myserver.example.com -v 4 -u u4 -r AS -a i386 -e extras  -p my-stable-channel
"""

def error(msg):
   print msg
   exit(-1)


if __name__ == "__main__":
    main()
