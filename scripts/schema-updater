#!/usr/bin/python
import os, os.path
import sys
import optparse
import re
import subprocess

def execute(command, shell=False, ignore_rc=False):
    if subprocess.call(command, shell = shell) != 0:
        if not ignore_rc:
            sys.stderr.write("\n -- ERROR:  command '%s' failed.  Setup aborted.\n" % command)
            sys.exit(1);

def setup(parser):
    default = "spacewalk/spacewalk@xe"
    parser.add_option("-c", "--connect", dest="connect", 
                        default=default,
                        help="Database connect string - default '%s'" % default)
    default = "."
    parser.add_option("-d","--dir", dest="scripts_dir",
                                default=default,
                                help="Sql Scripts directory - default '%s'" % default)
    parser.add_option("-s", "--start", dest="start", default = -sys.maxint,  type="int",
                    help="Enter the number of the first script to run." )

    parser.add_option("-e", "--end", dest="end", default = sys.maxint,  type="int",
                    help="Enter the number of the last script to run." )
                    
def in_range(name, start, end):
    return start <= int(name[:name.find("-")]) <= end
    
def main():
    parser = optparse.OptionParser()
    setup(parser)
    (options, args) = parser.parse_args()
    lines=[]
    p = re.compile(r"^\s*commit\b", re.IGNORECASE)
    files = sorted([os.path.join(options.scripts_dir, f) for f in os.listdir(options.scripts_dir) if f[-4:]==".sql"  and in_range(f, options.start, options.end)])
    print files
    for f in files:
        lines.extend([line.strip() for line in open(f).readlines() if not p.match(line)])
    if lines:
        lines.append("commit;")
        f = "/tmp/__lines.sql"
        open(f,"w").write("\n".join(lines))
        execute ("sqlplus -S %s < %s" % (options.connect, f), shell=True)
        print "Schema updated"
    
if __name__=="__main__":
    main()
