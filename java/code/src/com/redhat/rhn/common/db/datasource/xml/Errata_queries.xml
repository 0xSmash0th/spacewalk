<datasource_modes>

<mode name="org_pkg_errata">
  <query params="org_id, pid">
SELECT DISTINCT E.advisory_name AS advisory,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS issue_date,
                E.synopsis AS synopsis,
                E.advisory_type AS type,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified_date                
  FROM rhnErrata E,
       rhnAvailableChannels AC,
       rhnChannelErrata EC,
       rhnErrataPackage EP
 WHERE AC.org_id = :org_id
   AND EP.package_id = :pid
   AND EP.errata_id = EC.errata_id
   AND EC.channel_id = AC.channel_id
   AND EC.errata_id = E.id
ORDER BY E.advisory_name
  </query>
</mode>

<mode name="relevant_errata" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id">
SELECT E.id, E.update_date, E.synopsis AS ADVISORY_SYNOPSIS
  FROM rhnErrata E,
       (SELECT SNEC.errata_id, COUNT(SNEC.server_id) C
          FROM rhnServerNeededPackageCache SNEC
         WHERE SNEC.server_id IN (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id)
           AND errata_id IS NOT NULL
        GROUP BY SNEC.errata_id) X
 WHERE E.id = X.errata_id
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_errata_by_type" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id, type">
SELECT E.id, E.update_date
  FROM rhnErrata E,
       (SELECT SNEC.errata_id, COUNT(SNEC.server_id) C
          FROM rhnServerNeededPackageCache SNEC
         WHERE SNEC.server_id IN (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id)
           AND errata_id IS NOT NULL
        GROUP BY SNEC.errata_id) X
 WHERE E.id = X.errata_id
 AND E.advisory_type = :type
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>


<mode name="all_errata" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="org_id">
SELECT  DISTINCT E.id, E.update_date, E.synopsis AS ADVISORY_SYNOPSIS
  FROM  rhnErrata E, rhnChannelErrata CE, rhnAvailableChannels AC
 WHERE  AC.org_id = :org_id
   AND  CE.channel_id = AC.channel_id
   AND  CE.errata_id = E.id
ORDER BY  E.update_date DESC, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_to_system" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id, sid">
SELECT DISTINCT E.id, E.update_date,  
			E.synopsis AS ADVISORY_SYNOPSIS,
            E.advisory_name AS ADVISORY_NAME,
            E.advisory_type AS ADVISORY_TYPE,
			:sid as ASSOCIATED_SYSTEM 
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP
                               WHERE USP.user_id = :user_id
                                 AND USP.server_id = :sid)
   AND SNEC.server_id = :sid
   AND SNEC.errata_id = E.id
ORDER BY E.update_date DESC, E.id
  </query>
  <elaborator params="sid" multiple="t">
SELECT DISTINCT AEU.errata_id AS id,
                AST.name AS status,
                SA.action_id
  FROM rhnActionErrataUpdate AEU,
       rhnServerAction SA,
       rhnActionStatus AST
 WHERE SA.server_id = :sid
   AND SA.action_id = AEU.action_id
   AND AEU.errata_id IN (%s)
   AND AST.id = SA.status
   AND NOT ( EXISTS ( SELECT 1 FROM rhnServerNeededErrataCache
                              WHERE server_id = SA.server_id
                                AND errata_id = AEU.errata_id
                     )
                AND AST.name = 'Completed' -- filter out rolled back status
            )
  </elaborator>
  <elaborator name="errata_overview" />
</mode>

<mode name="relevant_to_system_by_type" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="user_id, sid, type">
SELECT DISTINCT E.id, E.update_date,  
			E.synopsis AS ADVISORY_SYNOPSIS,
            E.advisory_name AS ADVISORY_NAME,
            E.advisory_type AS ADVISORY_TYPE,
			:sid as ASSOCIATED_SYSTEM 
  FROM rhnErrata E,
       rhnServerNeededErrataCache SNEC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP
                               WHERE USP.user_id = :user_id
                                 AND USP.server_id = :sid)
   AND SNEC.server_id = :sid
   AND SNEC.errata_id = E.id
   AND E.advisory_type = :type
ORDER BY E.update_date DESC, E.id
  </query>
</mode>

<mode name="relevant_to_system_sorted_by_priority">
  <query params="user_id, sid">
SELECT E.synopsis AS ERRATA_SYNOPSIS, E.advisory_type
  FROM rhnErrata E,
       rhnServerNeededPackageCache SNEC,
       rhnUserServerPerms USP
 WHERE USP.server_id = :sid
   AND   USP.user_id = :user_id
   AND   SNEC.server_id = USP.server_id
   AND   SNEC.errata_id IS NOT NULL
   AND   E.id = SNEC.errata_id
ORDER BY  E.advisory_type DESC, E.update_date DESC,  E.id
  </query>
</mode>

<mode name="count_critical_errata_for_system">
  <query params="user_id, sid">
SELECT COUNT(DISTINCT E.ID) AS COUNT
  FROM rhnErrata E,
       rhnServerNeededPackageCache SNEC,
       rhnUserServerPerms USP
 WHERE USP.server_id = :sid
   AND   USP.user_id = :user_id
   AND   SNEC.server_id = USP.server_id
   AND   SNEC.errata_id IS NOT NULL
   AND   E.id = SNEC.errata_id
   AND   E.advisory_type = 'Security Advisory'
  </query>
</mode>

<mode name="count_noncritical_errata_for_system">
  <query params="user_id, sid">
SELECT COUNT(DISTINCT E.ID) AS COUNT
  FROM rhnErrata E,
       rhnServerNeededPackageCache SNEC,
       rhnUserServerPerms USP
 WHERE USP.server_id = :sid
   AND   USP.user_id = :user_id
   AND   SNEC.server_id = USP.server_id
   AND   SNEC.errata_id IS NOT NULL
   AND   E.id = SNEC.errata_id
   AND   E.advisory_type != 'Security Advisory'
  </query>
</mode>
   
<mode name="unscheduled_relevant_to_system" class="com.redhat.rhn.domain.errata.impl.PublishedErrata">
  <query params="user_id, sid">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnServerNeededPackageCache SNPC
 WHERE EXISTS (SELECT server_id FROM rhnUserServerPerms USP WHERE USP.user_id = :user_id AND USP.server_id = :sid)
   AND SNPC.server_id = :sid
   AND SNPC.errata_id = E.id
   AND NOT EXISTS (SELECT SA.server_id 
                     FROM rhnActionErrataUpdate AEU,
                          rhnServerAction SA,
                          rhnActionStatus AST
                    WHERE SA.server_id = :sid
                      AND SA.status = AST.id
                      AND AST.name IN('Queued', 'Picked Up')
                      AND AEU.action_id = SA.action_id
                      AND AEU.errata_id = E.id )
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="published_overview" params="">
    SELECT  E.id, E.advisory, E.advisory_name, E.advisory_type, E.update_date, E.synopsis
    FROM  rhnErrata E
    WHERE  E.id IN (%s)
    ORDER BY  E.update_date DESC  
  </elaborator>
</mode>

<mode name="issued_between">
  <query params="start_date_str, end_date_str">
SELECT DISTINCT
                E.id, E.issue_date
  FROM rhnErrata E
 WHERE
   E.issue_date &gt;= TO_DATE(:start_date_str, 'YYYY-MM-DD')
   AND E.issue_date &lt;= TO_DATE(:end_date_str, 'YYYY-MM-DD')
ORDER BY E.issue_date DESC
  </query>
</mode>

<mode name="relevant_to_channel_between">
  <query params="cid, start_date_str, end_date_str">
SELECT DISTINCT 
				E.advisory_name AS advisory,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS issue_date,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date,
                E.synopsis as synopsis,
                E.advisory_type as advisory_type,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified_date                
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND E.last_modified &gt;= TO_DATE(:start_date_str, 'YYYY-MM-DD HH24:MI:SS')
   AND E.last_modified &lt;= TO_DATE(:end_date_str, 'YYYY-MM-DD HH24:MI:SS')
ORDER BY last_modified_date DESC
  </query>
</mode>

<mode name="relevant_to_channel_after">
  <query params="cid, start_date_str">
SELECT DISTINCT 
				E.advisory_name AS advisory,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS issue_date,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date,
                E.synopsis as synopsis,
                E.advisory_type as advisory_type,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified_date  
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND E.last_modified &gt;= TO_DATE(:start_date_str, 'YYYY-MM-DD HH24:MI:SS')
ORDER BY last_modified_date DESC
  </query>
</mode>

<mode name="relevant_to_channel">
  <query params="cid">
SELECT DISTINCT 
				E.advisory_name AS advisory,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS issue_date,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date,
                E.synopsis as synopsis,
                E.advisory_type as advisory_type,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified_date  
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
ORDER BY last_modified_date DESC
  </query>
</mode>

<mode name="relevant_to_channel_by_type">
  <query params="cid, type">
SELECT DISTINCT
				E.advisory_name AS advisory,
                TO_CHAR(E.issue_date, 'YYYY-MM-DD HH24:MI:SS') AS issue_date,
                TO_CHAR(E.update_date, 'YYYY-MM-DD HH24:MI:SS') AS update_date,
                E.synopsis as synopsis,
                E.advisory_type as advisory_type,
                TO_CHAR(E.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified_date
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id
   AND E.advisory_type = :type
ORDER BY last_modified_date DESC
  </query>
</mode>

<mode name="in_sources_for_target" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid, user_id">
SELECT DISTINCT E.id , E.advisory_name AS advisory,
                E.update_date AS UPDATE_DATE,
                E.synopsis as ADVISORY_SYNOPSIS,
                E.advisory_type as ADVISORY_TYPE,
				E.advisory_name AS advisory
  FROM rhnErrata E inner join
       rhnChannelErrata CE on E.id = CE.errata_id left join
    ( select Cloned.original_id as clonedId from rhnChannelErrata CE2 inner join
            rhnErrataCloned Cloned on CE2.errata_id = cloned.id
        where CE2.channel_id = :custom_cid
    )  temp on E.id  = temp.clonedId,
       rhnSet S
 WHERE CE.channel_id  = S.element
 AND S.label =  'channels_for_errata' 
         and temp.clonedId is null		
         and S.user_id = :user_id
  </query>
</mode>

<mode  name="errata_list_in_set" class="com.redhat.rhn.frontend.dto.ErrataOverview">
<query params="user_id, set" >
  Select DISTINCT E.id , E.advisory_name AS advisory,
               E.update_date AS UPDATE_DATE,
               E.synopsis as ADVISORY_SYNOPSIS,
                E.advisory_type as ADVISORY_TYPE,
				E.advisory_name AS advisory
  FROM rhnErrata E,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = :set
   AND ST.element = E.id
</query>
</mode>

<mode name="in_sources_for_target_package_assoc" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid, user_id">
  Select DISTINCT Errata1.id , Errata1.advisory_name AS advisory,
               Errata1.update_date AS UPDATE_DATE,
               Errata1.synopsis as ADVISORY_SYNOPSIS,
                Errata1.advisory_type as ADVISORY_TYPE,
				Errata1.advisory_name AS advisory
  from
  (    Select  E.*
      FROM rhnErrata E inner join
    rhnChannelErrata CE on CE.errata_id = E.id inner join
    rhnSet S  on S.element = CE.channel_id inner join
    rhnErrataPackage EP on EP.errata_id = E.id inner join
    rhnPackage P on p.id = EP.package_id inner join
    rhnPackage P2 on P.name_id = P2.name_id inner join
    rhnChannelPackage CP on P2.id = CP.package_id
    where   
       CP.channel_id = :custom_cid
       and S.user_id = :user_id
       and  S.label = 'channels_for_errata')  Errata1 left join

   ( SELECT CE2.errata_id as Id, CE2.channel_id
    from rhnChannelErrata CE2
    where CE2.channel_id = :custom_cid )  Errata2 on Errata1.id = Errata2.id left join
     
    ( select Cloned.original_id as clonedId 
    	from rhnChannelErrata CE2 inner join
            rhnErrataCloned Cloned on CE2.errata_id = cloned.id
        where CE2.channel_id = :custom_cid
    )  temp on temp.clonedId = Errata1.id  
   where  channel_id is null 
   	and temp.clonedId is null 		
  </query>
</mode>


<mode name="for_target" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid">
SELECT DISTINCT E.id , E.advisory_name AS advisory,
                E.update_date AS UPDATE_DATE,
                E.synopsis as ADVISORY_SYNOPSIS,
                E.advisory_type as ADVISORY_TYPE,
				E.advisory_name AS advisory
  FROM rhnErrata E inner join 
       rhnChannelErrata CE on E.id = CE.errata_id left join
    ( select Cloned.original_id as clonedId from rhnChannelErrata CE2 inner join
            rhnErrataCloned Cloned on CE2.errata_id = cloned.id
        where CE2.channel_id = :custom_cid
    )  temp on temp.clonedId = E.id
 WHERE  
   CE.channel_id != :custom_cid
   and E.org_id is null
   and temp.clonedId is null
  </query>
</mode>





<mode name="for_target_package_assoc" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid">
  Select  DISTINCT Errata1.id , Errata1.advisory_name AS advisory,
               Errata1.update_date AS UPDATE_DATE,
               Errata1.synopsis as ADVISORY_SYNOPSIS,
                Errata1.advisory_type as ADVISORY_TYPE,
                Errata1.advisory_name AS advisory
  from
  (  SELECT E.*
      FROM rhnErrata E inner join
    rhnErrataPackage EP on EP.errata_id = E.id inner join
    rhnPackage P on p.id = EP.package_id inner join
    rhnPackage P2 on P.name_id = P2.name_id inner join
    rhnChannelPackage CP on P2.id = CP.package_id
    where  CP.channel_id = :custom_cid
     )  Errata1 left join

   ( SELECT CE2.errata_id as Id, CE2.channel_id
    from rhnChannelErrata CE2
    where CE2.channel_id = :custom_cid )  Errata2  on Errata1.id = Errata2.id  left join
    ( select Cloned.original_id as clonedId from rhnChannelErrata CE2 inner join
            rhnErrataCloned Cloned on CE2.errata_id = cloned.id
        where CE2.channel_id = :custom_cid
    )  temp on temp.clonedId = Errata1.id
   where
       channel_id is null
       and temp.ClonedId is null 
       and Errata1.org_id is null
  </query>
</mode>

<mode name="custom_for_target" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid">
SELECT DISTINCT E.id , E.advisory_name AS advisory,
                E.update_date AS UPDATE_DATE,
                E.synopsis as ADVISORY_SYNOPSIS,
                E.advisory_type as ADVISORY_TYPE
  FROM rhnErrata E inner join
       rhnChannelErrata CE on E.id = CE.errata_id inner join
       rhnErrataCloned EC on EC.id = E.id left join
    ( select EC3.original_id as id from rhnChannelErrata CE3 inner join
            rhnErrataCloned EC3 on CE3.errata_id = EC3.id
            where CE3.channel_id = :custom_cid
    )temp2 on temp2.id = EC.original_id

 WHERE
   CE.channel_id != :custom_cid
   and temp2.id is null
   and E.org_id is not null
  </query>
</mode>


<mode name="custom_for_target_package_assoc" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="custom_cid">
  Select  DISTINCT Errata1.id , Errata1.advisory_name AS advisory,
               Errata1.update_date AS UPDATE_DATE,
               Errata1.synopsis as ADVISORY_SYNOPSIS,
                Errata1.advisory_type as ADVISORY_TYPE
  from
  (  SELECT distinct E.id, E.synopsis, E.update_date, E.advisory_type, E.advisory_name, EC.original_id
      FROM rhnErrata E inner join   
    rhnErrataPackage EP on EP.errata_id = E.id inner join
    rhnPackage P on p.id = EP.package_id inner join
    rhnPackage P2 on P.name_id = P2.name_id inner join
    rhnChannelPackage CP on P2.id = CP.package_id  left join
    rhnErrataCloned EC on EC.id  =  E.id
    where  CP.channel_id = :custom_cid
    and E.org_id is not null
     )  Errata1 left join
    (   select EC3.original_id as id from rhnChannelErrata CE3 inner join
            rhnErrataCloned EC3 on CE3.errata_id = EC3.id
        where CE3.channel_id = :custom_cid
    ) temp2 on temp2.id = Errata1.original_id
   where
   	   temp2.id is null
  </query>
</mode>



<mode name="find_packages_for_errata_set" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="uid, set">
	select distinct P.id, PN.name package_name, PA.label as package_arch,
	EVR.version
       || '-' || EVR.release || (CASE WHEN EVR.epoch IS NULL THEN '' ELSE ':' || EVR.epoch END)
         package_nvre
	
	from
		rhnSet S inner join
		rhnErrata E on S.element = E.id inner join
		rhnErrataPackage EP on E.id = EP.errata_id inner join
		rhnPackage P on P.id = EP.package_id inner join
		rhnPackageArch PA on PA.id = P.package_arch_id inner join
		rhnPackageName  PN on PN.id = P.name_id inner join
		rhnPackageEvr  EVR on P.evr_id = EVR.id
	where S.label = :set
		and S.user_id = :uid
  </query>
</mode>

<mode name="find_packages_for_errata_set_with_assoc" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="custom_cid, uid, set">
	select distinct P.id, PN.name package_name, PA.label as package_arch,
		EVR.version
       || '-' || EVR.release || (CASE WHEN EVR.epoch IS NULL THEN '' ELSE ':' || EVR.epoch END)
         package_nvre,
         P.summary
    from
        rhnSet S inner join
        rhnErrata E on S.element = E.id inner join
        rhnErrataPackage EP on E.id = EP.errata_id inner join
        rhnPackage P on P.id = EP.package_id inner join
        rhnPackageArch PA on PA.id = P.package_arch_id inner join
        rhnPackageEvr EVR on Evr.id = P.evr_id inner join
    	rhnPackage P2 on P2.name_id = P.name_id inner join
    	rhnChannelPackage CP on CP.package_id = P2.id inner join
     	rhnPackageName PN on  PN.id = P.name_id
    where S.label = :set
   		 and S.user_id = :uid
         and CP.channel_id = :custom_cid
         and P2.Package_arch_id = P.package_arch_id
  </query>
</mode>

<mode name="find_packages_for_errata_and_channel" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="custom_cid, eid, org_id">
	select distinct P.id, PN.name package_name, PA.label as package_arch,
		EVR.version
       || '-' || EVR.release || (CASE WHEN EVR.epoch IS NULL THEN '' ELSE ':' || EVR.epoch END)
         package_nvre
    from
        rhnErrata E inner join
        rhnErrataPackage EP on E.id = EP.errata_id inner join
        rhnPackage P on P.id = EP.package_id inner join
        rhnPackageArch PA on PA.id = P.package_arch_id inner join
        rhnPackageEvr EVR on Evr.id = P.evr_id inner join
    rhnPackage P2 on P2.name_id = P.name_id inner join
    rhnChannelPackage CP on CP.package_id = P2.id
    inner join rhnPackageName PN on  PN.id = P.name_id
    inner join rhnChannel CN on CP.channel_id = CN.id
    where E.id = :eid
         and CP.channel_id = :custom_cid
         and P2.Package_arch_id = P.package_arch_id
         and CN.org_id = :org_id and
         (E.org_id is NULL or E.org_id = :org_id)
  </query>
</mode>



<query name="in_set" params="user_id, set_label">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = :set_label
   AND ST.element = E.id
ORDER BY E.update_date, E.id
</query>

<mode name="in_set" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query name="in_set" />
  <elaborator name="errata_overview" />
</mode>

<mode name="unpublished_in_set" class="com.redhat.rhn.frontend.dto.OwnedErrata">
  <query params="user_id, set_label">
SELECT DISTINCT E.id,
       E.update_date,
       E.advisory,
       E.advisory_type,
       E.advisory_name,
       E.synopsis AS ADVISORY_SYNOPSIS,
       E.update_date,
       E.created,
       E.locally_modified,
       0 AS PUBLISHED
  FROM rhnErrataTmp E,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = :set_label
   AND ST.element = E.id
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="published_in_set" class="com.redhat.rhn.frontend.dto.OwnedErrata">
  <query params="user_id, set_label">
SELECT DISTINCT E.id,
       E.update_date,
       E.advisory,
       E.advisory_type,
       E.advisory_name,
       E.synopsis AS ADVISORY_SYNOPSIS,
       E.update_date,
       E.created,
       E.locally_modified,
       1 AS PUBLISHED
  FROM rhnErrata E,
       rhnSet ST
 WHERE ST.user_id = :user_id
   AND ST.label = :set_label
   AND ST.element = E.id
ORDER BY E.update_date, E.id
  </query>
  <elaborator name="errata_overview" />
</mode>

<mode name="published_owned_errata" class="com.redhat.rhn.frontend.dto.OwnedErrata">
  <query params="org_id">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name, E.synopsis,
         E.update_date,
         E.created,
         E.locally_modified,
         1 AS PUBLISHED
    FROM rhnErrata E
   WHERE E.org_id = :org_id
ORDER BY  E.update_date DESC, E.id
  </query>
</mode>

<mode name="unpublished_owned_errata" class="com.redhat.rhn.frontend.dto.OwnedErrata">
  <query params="org_id">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name, E.synopsis,
         E.update_date,
         E.created,
         E.locally_modified,
         0 AS PUBLISHED
    FROM rhnErrataTmp E
   WHERE E.org_id = :org_id
ORDER BY  E.update_date DESC, E.id
  </query>
</mode>

<mode name="clonable_errata_list_all" class="com.redhat.rhn.frontend.dto.ClonableErrataDto">
  <query params="org_id">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name,
         E.synopsis, TO_CHAR(E.update_date, 'YYYY-MM-DD') AS update_date,
         NVL(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) AS ALREADY_CLONED
    FROM rhnErrata E, rhnChannelErrata CE
   WHERE CE.errata_id = E.id
     AND exists (SELECT 1
                   FROM rhnChannelCloned CC,
                        rhnChannel C
                  WHERE C.org_id = :org_id
                    AND CC.id = C.id
                    AND CC.original_id = CE.channel_id)
ORDER BY E.update_date DESC, E.id
  </query>
  <elaborator name="related_channels_owned_by_org"/>
</mode>

<mode name="clonable_errata_list_uncloned" class="com.redhat.rhn.frontend.dto.ClonableErrataDto">
  <query params="org_id">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name,
         E.synopsis, TO_CHAR(E.update_date, 'YYYY-MM-DD') AS update_date,
         NVL(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) AS ALREADY_CLONED
    FROM rhnErrata E, rhnChannelErrata CE
   WHERE CE.errata_id = E.id
     AND exists (SELECT 1
                   FROM rhnChannelCloned CC,
                        rhnChannel C
                  WHERE C.org_id = :org_id
                    AND CC.id = C.id
                    AND CC.original_id = CE.channel_id 
                    AND                            NVL(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) = 0)
ORDER BY E.update_date DESC, E.id
  </query>
  <elaborator name="related_channels_owned_by_org"/>
</mode>

<mode name="clonable_errata_for_channel_all" class="com.redhat.rhn.frontend.dto.ClonableErrataDto">
  <query params="channel_id, org_id">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name,
         E.synopsis, TO_CHAR(E.update_date, 'YYYY-MM-DD') AS update_date,
         NVL(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) AS ALREADY_CLONED
    FROM rhnErrata E, rhnChannelErrata CE
   WHERE (E.org_id IS NULL OR E.org_id = :org_id)
     AND CE.errata_id = E.id
     AND exists (SELECT 1
                   FROM rhnChannelCloned CC,
                        rhnChannel C
                  WHERE C.id = :channel_id
                    AND CC.id = C.id
                    AND CC.original_id = CE.channel_id)
ORDER BY E.update_date DESC, E.id
  </query>
  <elaborator name="related_channels_owned_by_org"/>
</mode>

<mode name="clonable_errata_for_channel_uncloned" class="com.redhat.rhn.frontend.dto.ClonableErrataDto">
  <query params="channel_id, org_id">
  SELECT E.id, E.advisory, E.advisory_type, E.advisory_name,
         E.synopsis, TO_CHAR(E.update_date, 'YYYY-MM-DD') AS update_date,
                  NVL(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) AS ALREADY_CLONED
    FROM rhnErrata E, rhnChannelErrata CE
   WHERE (E.org_id IS NULL OR E.org_id = :org_id)
     AND CE.errata_id = E.id
     AND exists (SELECT 1
                   FROM rhnChannelCloned CC,
                        rhnChannel C
                  WHERE C.id = :channel_id
                    AND CC.id = C.id
                    AND CC.original_id = CE.channel_id
                    AND                            NVL(((SELECT 1
                                FROM rhnErrata E2, rhnErrataCloned EC
                               WHERE E2.org_id = :org_id
                                 AND EC.id = E2.id
                                 AND EC.original_id = E.id)
                  UNION (SELECT 1
                                FROM rhnErrataTmp ET, rhnErrataClonedTmp EC2
                               WHERE ET.org_id = :org_id
                                 AND EC2.id = ET.id
                                 AND EC2.original_id = E.id)), 0) = 0)
ORDER BY E.update_date DESC, E.id
  </query>
  <elaborator name="related_channels_owned_by_org"/>
</mode>

<query name="related_channels_owned_by_org" multiple="t" params="org_id">
  SELECT CE.errata_id AS ID, C.id as channel_id, C.name AS channel_name
    FROM rhnChannelErrata CE,
         rhnChannel C,
         rhnChannelCloned CC
   WHERE CE.errata_id IN (%s)
     AND C.org_id = :org_id
     AND CC.id = C.id
     AND CC.original_id = CE.channel_id
ORDER BY CE.errata_id, C.name
</query>
     
<query name="errata_overview" params="user_id">
SELECT  E.id, E.advisory, E.advisory_name, E.advisory_type, E.update_date, E.synopsis as advisory_synopsis,
    (SELECT  COUNT(DISTINCT S.id)
       FROM  rhnServerNeededErrataCache SNEC, rhnServer S, rhnUserServerPerms USP
      WHERE  USP.user_id = :user_id
        AND  USP.server_id = S.ID
        AND  S.id = SNEC.server_id
        AND  EXISTS (SELECT 1
                       FROM rhnServerFeaturesView SFV
                      WHERE SFV.server_id = SNEC.server_id
                        AND SFV.label = 'ftr_errata_updates')
        AND  SNEC.errata_id = E.id) AS AFFECTED_SYSTEM_COUNT
  FROM  rhnErrata E
 WHERE  E.id IN (%s)
ORDER BY  E.update_date DESC
</query>

<query name="relevant_to_system_set_elab" params="user_id">
SELECT  E.id, E.advisory, E.advisory_name, E.advisory_type,
        E.synopsis AS advisory_synopsis,
        TO_CHAR(E.update_date, 'YYYY-MM-DD') AS advisory_last_updated,
        COUNT(DISTINCT S.id) AS affected_system_count
  FROM  rhnErrata E, rhnSet ST, rhnServerNeededPackageCache SNPC, rhnServer S, rhnUserServerPerms USP
 WHERE  USP.user_id = :user_id
   AND  USP.server_id = S.ID
   AND  S.id = SNPC.server_id
   AND  E.id IN (%s)
   AND  SNPC.errata_id = E.id
   AND  USP.user_id = ST.user_id
   AND  ST.label = 'system_list'
   AND  S.id = ST.element
GROUP BY  E.id, E.advisory_name, E.advisory, E.advisory_type, E.synopsis, E.update_date
ORDER BY  E.update_date DESC
</query>

<callable-mode name="remove_errata">
  <query params="eid">
     {call delete_errata(:eid)}
  </query>
</callable-mode>

<write-mode name="deletePaidErrataTempCache">
  <query params="errata_id">
 delete from rhnPaidErrataTempCache where errata_id = :errata_id
  </query>
</write-mode>

<write-mode name="deleteErrataFile">
  <query params="errata_id">
 delete from rhnErrataFile where errata_id = :errata_id
  </query>
</write-mode>

<write-mode name="deleteErrataPackage">
  <query params="errata_id">
 delete from rhnErrataPackage where errata_id = :errata_id
  </query>
</write-mode>

<write-mode name="deleteErrataTmp">
  <query params="errata_id">
 delete from rhnErrataTmp where id = :errata_id
  </query>
</write-mode>

<write-mode name="deleteErrata">
  <query params="errata_id, org_id">
 delete from rhnErrata where id = :errata_id and org_id = :org_id
  </query>
</write-mode>


<write-mode name="deleteServerErrataPackageCache">
  <query params="errata_id, org_id">
delete from rhnServerNeededCache
  where server_id in (select id from rhnServer where org_id = :org_id)
  and errata_id = :errata_id
  </query>
</write-mode>



<callable-mode name="remove_errata_by_org">
  <query params="eid, oid">
     {call delete_errata_by_org(:eid, :oid)}
  </query>
</callable-mode>

<!-- Errata Search Queries -->
<elaborator name="default_errata_elaborator" params="">
SELECT  E.id, E.advisory, E.advisory_name, E.advisory_type, E.synopsis AS ADVISORY_SYNOPSIS, 
        TO_CHAR(E.update_date, 'YYYY-MM-DD') AS ADVISORY_LAST_UPDATED
  FROM  rhnErrata E
   WHERE  E.id IN (%s)
ORDER BY E.update_date DESC
</elaborator>

<mode name="errata_search_by_advisory" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="org_id, search_string">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnChannelErrata CE,
       rhnAvailableChannels AC
 WHERE E.id = CE.errata_id
   AND CE.channel_id = AC.channel_id
   AND AC.org_id = :org_id
   AND (INSTR (UPPER(E.advisory), UPPER(:search_string)) > 0)
   ORDER BY E.update_date DESC
  </query>
  <elaborator name="default_errata_elaborator" />  
</mode>

<mode name="errata_search_by_package_name" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="org_id, search_string">
SELECT DISTINCT E.id, E.update_date
  FROM rhnErrata E,
       rhnPackageName PN,
       rhnPackage P,
       rhnErrataPackage EP,
       rhnChannelErrata CE,
       rhnAvailableChannels AC
 WHERE EP.errata_id = CE.errata_id
   AND CE.channel_id = AC.channel_id
   AND AC.org_id = :org_id
   AND P.id = EP.package_id
   AND PN.id = P.name_id
   AND E.id = EP.errata_id
   AND (INSTR (UPPER(PN.name), UPPER(:search_string)) > 0)
   ORDER BY E.update_date DESC
  </query>
  <elaborator name="default_errata_elaborator" />
</mode>

<mode name="bugs_fixed_by_errata" class="com.redhat.rhn.frontend.dto.Bug">
  <query params="eid">
SELECT  EBL.bug_id, EBL.summary
  FROM  rhnErrataBugList EBL
 WHERE  EBL.errata_id = :eid
ORDER BY UPPER(EBL.bug_id)
  </query>
</mode>

<mode name="cves_for_errata" class="com.redhat.rhn.frontend.dto.CVE">
  <query params="eid">
SELECT  CVE.name
  FROM  rhnCVE CVE, rhnErrataCVE ECVE
 WHERE  ECVE.errata_id = :eid
   AND  ECVE.cve_id = CVE.id
ORDER BY UPPER(CVE.name)
  </query>
</mode>

<mode name="erratas_for_cve">
   <query params="cve">
SELECT E.id
FROM rhnErrata E, rhnCVE C, rhnErrataCVE ec
WHERE C.name = :cve
AND EC.cve_id = C.id
AND EC.errata_id = E.id
   </query>
</mode>

<mode name="keywords" class="com.redhat.rhn.frontend.dto.ErrataKeyword">
  <query params="eid">
SELECT  EK.keyword
  FROM  rhnErrataKeyword EK
 WHERE  EK.errata_id = :eid
ORDER BY UPPER(EK.keyword)
  </query>
</mode>

<mode name="errata_packages" class="com.redhat.rhn.frontend.dto.ErrataPackageFile">
  <query params="eid, org_id">
SELECT  DISTINCT EFP.package_id,
                 EF.md5sum,
                 EF.filename AS FILENAME,
                 C.name AS CHANNEL_NAME
  FROM  rhnChannel C,
        rhnErrataFilePackage EFP,
        rhnErrataFileChannel EFC,
        rhnErrataFile EF
 WHERE  EF.errata_id = :eid
   AND  EF.id = EFC.errata_file_id (+)
   AND  EF.id = EFP.errata_file_id (+)
   AND  EFC.channel_id IN (SELECT AC.channel_id FROM rhnAvailableChannels AC WHERE AC.org_id = :org_id)
   AND  EFC.channel_id = C.id
ORDER BY C.name, EF.filename DESC
  </query>
</mode>

<mode name="available_to_org">
  <query params="eid, org_id">
SELECT  1
  FROM  rhnChannelErrata CE
 WHERE  CE.errata_id = :eid
   AND  CE.channel_id IN(SELECT channel_id
                           FROM rhnAvailableChannels
                          WHERE org_id = :org_id)
  </query>
</mode>

<write-mode name="populate_visible_errata">
  <query params="session_id, org_id">
  insert into rhnVisibleObjects ( SELECT distinct :session_id, E.id, 'errata'
                                    FROM rhnErrata E,
                                         rhnChannelErrata CE,
                                         rhnAvailableChannels AC
                                   WHERE E.id = CE.errata_id
                                     AND CE.channel_id = AC.channel_id
                                     AND AC.org_id = :org_id)
  </query>
</write-mode>

<mode name="channel_errata_for_list" class="com.redhat.rhn.frontend.dto.ErrataOverview">
  <query params="cid">
 SELECT DISTINCT E.id,
				E.advisory_name AS advisory,
                E.update_date AS update_date,
                E.synopsis as advisory_synopsis,
                E.advisory_type as advisory_type           
  FROM rhnErrata E,
       rhnChannelErrata CE
 WHERE CE.channel_id = :cid
   AND CE.errata_id = E.id 
  </query>
</mode>


</datasource_modes>
