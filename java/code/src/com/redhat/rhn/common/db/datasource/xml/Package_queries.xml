<datasource_modes>

<callable-mode name="update_channel">
  <query params="cid">
    {call rhn_channel.update_channel(:cid)}
  </query>
</callable-mode>

<mode name="system_latest_all_available_packages">
  <query params="sid">
SELECT  
        pn.name AS name,
        full_list.id AS id,
        NVL(full_list.evr.version, ' ') AS version,
        NVL(full_list.evr.release, ' ') AS release,
        NVL(full_list.evr.epoch, ' ') AS epoch,
        NVL(full_list.arch_label, ' ') AS arch_label
  FROM  (
         SELECT  p.name_id name_id,
                 p.id,
                 p.evr_id,
                 max(pe.evr) evr,
                 pa.label as arch_label
           FROM  rhnPackageArch PA, rhnPackageEVR PE, rhnPackage P,
                 rhnChannelNewestPackage CNP, rhnServerChannel SC
          WHERE  sc.server_id = :sid
            AND  sc.channel_id = cnp.channel_id
            AND  cnp.package_id = p.id
            AND  p.evr_id = pe.id
            AND  p.package_arch_id = pa.id
       GROUP BY  p.name_id, p.id, p.evr_id, pa.label
       ) full_list,
       rhnPackageName pn
 WHERE  full_list.name_id = pn.id
   AND  NOT EXISTS (SELECT 1
                      FROM rhnServerPackage SP, rhnPackageEVR PE2
                     WHERE SP.server_id = :sid
                       AND SP.name_id = full_list.name_id
                       AND SP.evr_id = PE2.id
                       AND PE2.evr &gt;= full_list.evr)
ORDER BY  UPPER(pn.name), full_list.evr
  </query>
</mode>

<mode name="package_conflicts">
  <query params="pid">
SELECT  DISTINCT C.name, C.version, P.sense
  FROM  rhnPackageCapability C, rhnPackageConflicts P
 WHERE  P.package_id = :pid
   AND  P.capability_id = C.id
ORDER BY UPPER(C.name), C.version
  </query>
</mode>

<mode name="package_provides">
  <query params="pid">
SELECT  DISTINCT C.name, C.version, P.sense
  FROM  rhnPackageCapability C, rhnPackageProvides P
 WHERE  P.package_id = :pid
   AND  P.capability_id = C.id
ORDER BY UPPER(C.name), C.version
  </query>
</mode>

<mode name="package_obsoletes">
  <query params="pid">
SELECT  DISTINCT C.name, C.version, P.sense
  FROM  rhnPackageCapability C, rhnPackageObsoletes P
 WHERE  P.package_id = :pid
   AND  P.capability_id = C.id
ORDER BY UPPER(C.name), C.version
  </query>
</mode>

<mode name="package_requires">
  <query params="pid">
SELECT  DISTINCT C.name, C.version, P.sense
  FROM  rhnPackageCapability C, rhnPackageRequires P
 WHERE  P.package_id = :pid
   AND  P.capability_id = C.id
ORDER BY UPPER(C.name), C.version
  </query>
</mode>

<mode name="package_files">
  <query params="pid">
SELECT C.name,
       F.file_size,
       F.md5,
       F.file_mode,
       F.linkto,
       TO_CHAR(F.mtime, 'YYYY-MM-DD HH24:MI:SS') AS MTIME
  FROM rhnPackageFile F, rhnPackageCapability C
 WHERE F.package_id = :pid
   AND F.capability_id = C.id
ORDER BY UPPER(C.name)
  </query>
</mode>

<write-mode name="cleanup_package_requires">
  <query params="pid">
    DELETE from
    rhnPackageRequires r
    WHERE r.package_id = :pid
  </query>
</write-mode>

<write-mode name="cleanup_package_provides">
  <query params="pid">
    DELETE FROM
    rhnPackageProvides p
    WHERE p.package_id = :pid
  </query>
</write-mode>

<write-mode name="cleanup_package_conflicts">
  <query params="pid">
    DELETE from 
    rhnPackageConflicts
    where package_id = :pid
  </query>
</write-mode>

<write-mode name="cleanup_package_obsoletes">
  <query params="pid">
    DELETE from
    rhnPackageObsoletes
    where package_id = :pid
  </query>
</write-mode>

<write-mode name="cleanup_package_caps">
  <query params="pid">
DELETE FROM
rhnPackageCapability
WHERE id IN
  (SELECT C.id FROM rhnPackageCapability C, rhnPackageFile F
   WHERE F.package_id = :pid
   AND F.capability_id = C.id)
  </query>
</write-mode>

<write-mode name="cleanup_package_files">
  <query params="pid">
    DELETE FROM
    rhnPackageFile F
    WHERE F.package_id = :pid
  </query>
</write-mode>

<write-mode name="cleanup_package_changelogs">
  <query params="pid">
    DELETE from 
    rhnPackageChangelog
    where package_id = :pid
  </query>
</write-mode>

<write-mode name="cleanup_package_locations">
  <query params="pid">
    DELETE from 
    rhnPackageLocation
    where package_id = :pid
  </query>
</write-mode>


<write-mode name="cleanup_package_channels">
  <query params="pid">
    DELETE from
    rhnChannelPackage
    where package_id = :pid
  </query>
</write-mode>


<mode name="providing_channels">
  <query params="pid, org_id">
SELECT  C.id, C.name, C.label
  FROM  rhnAvailableChannels AC, rhnChannel C, rhnChannelPackage CP
 WHERE  CP.package_id = :pid
   AND  CP.channel_id = C.id
   AND  AC.org_id = :org_id
   AND  C.id = AC.channel_id
ORDER BY UPPER(C.label)
  </query>
</mode>

<mode name="name_by_provide" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="org_id, cap_name">
SELECT DISTINCT PN.name
 FROM rhnPackageName PN,
      rhnPackage P,
      rhnPackageProvides PP,
      rhnPackageCapability PC
WHERE PC.name = :cap_name
  AND PC.id = PP.capability_id
  AND PP.package_id = P.id
  AND (P.org_id = :org_id OR EXISTS (
          SELECT  1
            FROM  rhnChannelPackage CP,
                  rhnChannelFamilyMembers CFM,
                  rhnOrgChannelFamilyPermissions CFP
           WHERE  CFP.org_id = :org_id
             AND  CFP.channel_family_id = CFM.channel_family_id
             AND  CFM.CHANNEL_ID = CP.channel_id
             AND  CP.package_id = P.id))
  AND P.name_id = PN.id
ORDER BY UPPER(PN.name)
  </query>
</mode>

<mode name="name_by_provide_and_channel" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="channel_id, org_id, cap_name">
SELECT DISTINCT PN.name

 FROM rhnPackageName PN,
      rhnPackage P,
      rhnPackageProvides PP,
      rhnPackageCapability PC
WHERE PC.name = :cap_name
  AND PC.id = PP.capability_id
  AND PP.package_id = P.id
  AND (
    (P.org_id = :org_id AND EXISTS (
        SELECT 1
        FROM rhnChannelPackage CP 
            WHERE CP.channel_id = :channel_id 
                AND CP.package_id = P.id))
    OR EXISTS (
          SELECT  1
            FROM  rhnChannelPackage CP,
                  rhnChannelFamilyMembers CFM,
                  rhnOrgChannelFamilyPermissions CFP
           WHERE  CFP.org_id = :org_id
             AND  CP.channel_id = :channel_id
             AND  CFP.channel_family_id = CFM.channel_family_id
             AND  CFM.CHANNEL_ID = CP.channel_id
             AND  CP.package_id = P.id))
  AND P.name_id = PN.id
ORDER BY UPPER(PN.name)
  </query>
</mode>

<mode name="snapshot_unservable_package_list">
  <query params="sid, ss_id, org_id">
SELECT PN.id AS NAME_ID,
       PE.id AS EVR_ID,
       PN.name AS NAME,
       PE.version AS VERSION,
       PE.release AS RELEASE,
       PE.epoch AS EPOCH,
       PN.name || '-' || PE.evr.as_vre_simple() AS NVRE,
       UPPER(PN.name || '-' || PE.evr.as_vre_simple()) AS U_NVRE
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageNEVRA PNEVRA,
       rhnSnapshotPackage SP,
       rhnSnapshot S
 WHERE S.id = :ss_id
   AND S.server_id = :sid
   AND S.id = SP.snapshot_id
   AND SP.nevra_id = PNEVRA.id
   AND PNEVRA.name_id = PN.id
   AND NOT EXISTS (SELECT 1 FROM rhnPackageSyncBlacklist PSB WHERE
                     PSB.package_name_id = PN.id AND org_id is NULL OR org_id = :org_id)
   AND PNEVRA.evr_id = PE.id
   AND NOT EXISTS (
SELECT 1 FROM rhnServerPackage SP
 WHERE SP.server_id = :sid
   AND SP.name_id = PN.id
   AND SP.evr_id = PE.id
)
MINUS
SELECT PN.id AS NAME_ID,
       PE.id AS EVR_ID,
       PN.name AS NAME,
       PE.version AS VERSION,
       PE.release AS RELEASE,
       PE.epoch AS EPOCH,
       PN.name || '-' || PE.evr.as_vre_simple() AS NVRE,
       UPPER(PN.name || '-' || PE.evr.as_vre_simple()) AS U_NVRE
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackage P,
       rhnChannelPackage CP,
       rhnSnapshotChannel SC
 WHERE SC.snapshot_id = :ss_id
   AND SC.channel_id = CP.channel_id
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
ORDER BY 8
  </query>
</mode>

<mode name="system_snapshot_package_list">
  <query params="sid, ss_id, org_id">
SELECT PN.id AS NAME_ID,
       PE.id AS EVR_ID,
       PN.name AS NAME,
       PE.evr.version AS VERSION,
       PE.evr.release AS RELEASE,
       PE.evr.epoch AS EPOCH,
       PN.name || '-' || PE.evr.as_vre_simple() AS NVRE
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageNEVRA PNEVRA,
       rhnSnapshotPackage SP,
       rhnSnapshot S
 WHERE S.id = :ss_id
   AND S.server_id = :sid
   AND S.id = SP.snapshot_id
   AND SP.nevra_id = PNEVRA.id
   AND PNEVRA.name_id = PN.id
   AND NOT EXISTS (SELECT 1 FROM rhnPackageSyncBlacklist PSB WHERE
                     PSB.package_name_id = PN.id AND org_id is NULL OR org_id = :org_id)
   AND PNEVRA.evr_id = PE.id
ORDER BY UPPER(PN.name || '-' || PE.version || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END))
  </query>
</mode>

<mode name="package_removal_failures">
  <query params="sid, action_id">
SELECT PN.name || '-' || PE.evr.as_vre_simple() AS PACKAGE,
       PC.name || DECODE(PC.version, NULL, '', '-' || PC.version) AS NEEDED_CAPABILITY,
       (SELECT name FROM rhnPackageName WHERE id = APRF.suggested) AS SUGGESTED_PACKAGE,
       APRF.flags AS FLAGS,
       APRF.sense AS SENSE
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageCapability PC,
       rhnActionPackageRemovalFailure APRF
 WHERE APRF.action_id = :action_id
   AND APRF.server_id = :sid
   AND APRF.name_id = PN.id
   AND APRF.evr_id = PE.id
   AND APRF.capability_id = PC.id
ORDER BY UPPER(PACKAGE)
  </query>
</mode>

<mode name="packages_in_errata" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="eid">
SELECT DISTINCT P.id id, PN.name || '-' || PE.version
       || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END)
       || '-' || PA.label package_nvre
 FROM rhnPackageName PN,
      rhnPackageEVR PE,
      rhnPackageArch PA,
      rhnPackage P,
      rhnErrataPackage EP
WHERE EP.errata_id = :eid
  AND EP.package_id = P.id
  AND PN.id = P.name_id
  AND PE.id = P.evr_id
  AND PA.id = P.package_arch_id
ORDER BY UPPER(PN.name || '-' || PE.version || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END)  || '-' || PA.label)
  </query>
  <elaborator name="package_channels" />
</mode>

<mode name="packages_in_tmp_errata" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="eid">
SELECT DISTINCT P.id id, PN.name || '-' || PE.version
       || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END)
       || '-' || PA.label package_nvre
 FROM rhnPackageName PN,
      rhnPackageEVR PE,
      rhnPackageArch PA,
      rhnPackage P,
      rhnErrataPackageTmp EP
WHERE EP.errata_id = :eid
  AND EP.package_id = P.id
  AND PN.id = P.name_id
  AND PE.id = P.evr_id
  AND PA.id = P.package_arch_id
ORDER BY UPPER(PN.name || '-' || PE.version || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END)  || '-' || PA.label)
  </query>
  <elaborator name="package_channels" />
</mode>

<mode name="packages_in_channel_by_id_combo" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="cid">
SELECT PN.id || '|' || PE.id || '|' || PA.id AS ID_COMBO,
       PN.name,
       PN.name || '-' || PE.evr.as_vre_simple() AS NVRE,
       P.summary,
       PE.epoch,
       PE.version,
       PE.release,
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA,
       PN.id as name_id,
       PE.id as evr_id
  FROM rhnPackageArch PA, rhnPackageName PN, rhnPackageEVR PE, rhnPackage P,
       rhnChannelPackage CP
 WHERE CP.channel_id = :cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND PA.id = P.package_arch_id
ORDER BY UPPER(NVRE)
  </query>
</mode>

<mode name="packages_in_channel" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="cid">
SELECT P.id AS ID,
       PN.name as package_name,
       P.summary,
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS nvrea,
       PP.name AS provider
  FROM rhnPackage P inner join 
  	   rhnPackageArch PA on P.package_arch_id = PA.id inner join
       rhnPackageName PN on P.name_id = PN.id inner join 
       rhnPackageEVR PE on P.evr_id = PE.id  inner join
       rhnChannelPackage CP on P.id = CP.package_id left join
       rhnPackageKeyAssociation assoc on assoc.package_id = P.id left join
       rhnPackageKey KEY on KEY.id = assoc.key_id left join 
       rhnPackageProvider PP on key.provider_id = PP.id  left join
       rhnPackageKeyType KEYT on KEY.key_type_id = KEYT.id
 WHERE CP.channel_id = :cid and
		( KEYT.label = 'gpg' or KEYT.label is NULL)
  </query>
</mode>

<mode name="packages_selected_for_sync">
  <query params="">
SELECT 1 FROM DUAL
<!-- dummy -->
  </query>
</mode>

<mode name="sync_confirm_packages_in_set">
  <query params="">
SELECT 1 FROM DUAL
<!-- dummy -->
  </query>
</mode>

<mode name="compare_managed_channel_packages">
  <query params="">
SELECT 1 FROM DUAL
<!-- dummy -->
  </query>
</mode>

<mode name="managed_channel_merge_preview">
  <query params="">
SELECT 1 FROM DUAL
<!-- dummy -->
  </query>
</mode>

<mode name="newest_packages_in_channel">
  <query name="newest_packages_in_channel"/>
</mode>

<query name="newest_packages_in_channel" params="cid">
SELECT DISTINCT CNP.package_id as ID,
                CNP.name_id,
                CNP.evr_id,
                PN.name,
                PE.epoch,
                PE.version,
                PE.release,
                PA.label AS arch,
                PN.name || '-' || PE.evr.as_vre_simple() nvre
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageArch PA,
       rhnChannelNewestPackage CNP,
       rhnChannel C
 WHERE C.id = :cid
   AND C.id = CNP.channel_id
   AND PN.id = CNP.name_id
   AND PE.id = CNP.evr_id
   AND PA.id = CNP.package_arch_id
ORDER BY UPPER(nvre)
</query>

<!-- used by ChannelSoftwareHandler -->
<mode name="latest_packages_in_channel_api">
    <query params="cid">
SELECT DISTINCT 
                CNP.package_id as id,
                PN.name as name,
                NVL(PE.version, ' ') as version,
                NVL(PE.release, ' ') as release,
                NVL(PE.epoch, ' ') as epoch,
                NVL(PA.label, ' ') AS arch_label
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageArch PA,
       rhnChannelNewestPackage CNP,
       rhnChannel C
 WHERE C.id = :cid
   AND C.id = CNP.channel_id
   AND PN.id = CNP.name_id
   AND PE.id = CNP.evr_id
   AND PA.id = CNP.package_arch_id
ORDER BY UPPER(PN.name)
</query>
</mode>

<mode name="newest_packages_in_channel_details">
  <query name="newest_packages_in_channel"/>
  <elaborator params="">
SELECT P.id, P.description, P.summary, P.path, P.source_path
  FROM rhnPackage P
 WHERE P.id IN (%s)
  </elaborator>
</mode>

<mode name="latest_packages_in_channel" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="cid">
<!-- must call the id_combo simply 'id' because listview assumes that
     will be the name -->

SELECT DISTINCT
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label nvre,
       PN.id || '|' || CNP.evr_id || '|' || PA.id AS id_combo,
       (SELECT MAX(summary) FROM rhnPackage P WHERE P.id = CNP.package_id) SUMMARY,
       PA.name as arch
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageArch PA,
       rhnChannelNewestPackage CNP
 WHERE CNP.channel_id = :cid
   AND PN.id = CNP.name_id
   AND PE.id = CNP.evr_id
   AND PA.id = CNP.PACKAGE_ARCH_ID
ORDER BY UPPER(NVRE)
  </query>
</mode>

<mode name="yum_packages_in_channel">
  <query params="cid">
SELECT
       PN.name NAME,
       PE.epoch EPOCH,
       PE.version VERSION,
       PE.release RELEASE,
       P.path PATH,
       PA.label ARCH
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageArch PA,
       rhnPackage P,
       rhnChannelNewestPackage CNP
 WHERE CNP.channel_id = :cid
   AND PN.id = CNP.name_id
   AND PE.id = CNP.evr_id
   AND PA.id = CNP.package_arch_id
   AND P.id = CNP.package_id
  </query>
</mode>

<mode name="oldest_packages_in_channel">
  <query params="cid">
<!-- attempt to get as close as possible to the packages in the base -->
<!-- distribution, before any errata are applied -->
SELECT CP.package_id AS id, PN.name
   FROM rhnPackageName PN,
        rhnPackage P,
        rhnChannelPackage CP
  WHERE CP.channel_id = :cid
    AND P.id = CP.package_id
    AND PN.id = P.name_id
    AND NOT EXISTS (SELECT 1
                      FROM rhnChannelErrata CE, rhnErrataPackage EP
                     WHERE CE.channel_id = :cid
                       AND CE.errata_id = EP.errata_id
                       AND EP.package_id = P.id)
  </query>
</mode>

<mode name="system_package_list" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="sid">
SELECT  PN.id || '|' || PE.id || '|' || PA.id AS ID_COMBO,
        PN.name || '-' || PE.evr.as_vre_simple() AS NVRE,
        PN.name AS name,
        PE.version,
        PE.release,
        PE.epoch,
        PN.id AS NAME_ID,
        PE.id AS EVR_ID,
        PA.label as arch
  FROM  rhnPackageName PN 
  			INNER JOIN rhnServerPackage SP on SP.name_id = PN.id
  			INNER JOIN rhnPackageEVR PE on SP.evr_id = PE.id
  			LEFT JOIN rhnPackageArch PA on SP.PACKAGE_ARCH_ID  = PA.id
  WHERE  SP.server_id = :sid
ORDER BY UPPER(NVRE)
  </query>
</mode>

<mode name="system_canonical_package_list" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="sid, org_id">
SELECT PN.id || '|' || SPE.id AS ID_COMBO,
       SP.name_id,
       PN.name,
       SP.evr_id,
       SPE.evr.as_vre_simple() AS EVR,
       SPE.epoch,
       SPE.version,
       SPE.release
  FROM rhnPackageName PN,
       rhnPackageEVR SPE,
       rhnServerPackage SP
 WHERE PN.id = SP.name_id
   AND SPE.id = SP.evr_id
   AND SP.server_id = :sid
   AND NOT EXISTS (SELECT 1 FROM rhnPackageSyncBlacklist PSB WHERE
                     PSB.package_name_id = PN.id AND org_id is NULL OR org_id = :org_id)
  </query>
</mode>

<mode name="snapshot_canonical_package_list" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="ss_id,org_id">
SELECT PN.id || '|' || PE.id AS ID_COMBO,
       PNEVRA.name_id,
       PN.name,
       PNEVRA.evr_id,
       PE.evr.as_vre_simple() AS EVR,
       PE.epoch,
       PE.version,
       PE.release
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageNEVRA PNEVRA,
       rhnSnapshotPackage SP
 WHERE SP.snapshot_id = :ss_id
   AND SP.nevra_id = PNEVRA.id
   AND PNEVRA.name_id = PN.id
   AND PNEVRA.evr_id = PE.id
   AND NOT EXISTS (SELECT 1 FROM rhnPackageSyncBlacklist PSB WHERE
                     PSB.package_name_id = PN.id AND org_id is NULL OR org_id = :org_id)
  </query>
</mode>

<mode name="system_profile_comparison">
  <query params="">
SELECT 1 FROM dual
  </query>
</mode>


<mode name="comparison_to_snapshot">
  <query params="">
SELECT 1 FROM dual
  </query>
</mode>

<mode name="profile_canonical_package_list" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="prid,org_id">
SELECT PN.id || '|' || SPE.id AS ID_COMBO,
       SP.name_id,
       PN.name,
       SP.evr_id,
       SPE.evr.as_vre_simple() AS EVR,
       SPE.epoch,
       SPE.version,
       SPE.release
  FROM rhnPackageName PN,
       rhnPackageEVR SPE,
       rhnServerProfilePackage SP
 WHERE PN.id = SP.name_id
   AND SPE.id = SP.evr_id
   AND SP.server_profile_id = :prid
   AND NOT EXISTS (SELECT 1 FROM rhnPackageSyncBlacklist PSB WHERE
                     PSB.package_name_id = PN.id AND org_id is NULL OR org_id = :org_id)
  </query>
</mode>

<mode name="obsoleting_packages">
  <query params="pid, org_id">
SELECT P2.id AS ID, PN.name || '-' || PE.evr.as_vre_simple() || '-' ||
  PA.label AS NVREA, AC.channel_id, AC.channel_name, EP.errata_id, E.
  advisory, E.advisory_type
  FROM 
       rhnPackageArch PA,
       rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageEVR PE2,
       rhnErrata E,
       rhnErrataPackage EP,
       rhnPackage P2,
       rhnAvailableChannels AC,
       rhnChannelPackage CP2,
       rhnChannelPackage CP1,
       rhnPackage P1
 WHERE 1=1
   and p1.id = :pid
   and p1.id = cp1.package_id
   and cp1.channel_id = cp2.channel_id
   AND AC.org_id = :org_id
   and ac.channel_id = cp2.channel_id
   and p1.name_id = p2.name_id
   AND cp2.package_id = P2.id
   AND P2.id = EP.package_id(+)
   AND p2.evr_id = PE.id
   AND PE2.id = P1.evr_id
   AND E.id(+) = EP.errata_id
   and pe.id != pe2.id
   AND PE.evr >= PE2.evr
-- after here is just for output
   and p2.name_id = pn.id
   and p2.package_arch_id = pa.id
ORDER BY PE.evr DESC, AC.channel_name, E.issue_date
  </query>
</mode>


<mode name="packages_from_server_set">
  <query params="user_id, set_label">
SELECT   PN.ID || '|' || PE.ID AS ID,
         PN.ID AS pn_id,
         PE.ID AS pe_id,
         PN.NAME,
         PE.VERSION,
         PE.release,
         PE.epoch,
         X.num_systems
    FROM rhnPackageName PN,
         rhnPackageEVR PE,
         (SELECT   SP.name_id,
                   SP.evr_id,
                   COUNT (SP.server_id) num_systems
              FROM rhnServerPackage SP,
                   rhnSet S
             WHERE s.user_id = :user_id
               AND s.label = :set_label
               AND s.ELEMENT = SP.server_id
          GROUP BY SP.name_id,
                   SP.evr_id) X
   WHERE PE.ID = X.evr_id
     AND PN.ID = X.name_id
ORDER BY UPPER (PN.NAME)
  </query>
</mode>

<mode name="verify_packages_from_server_set">
  <query params="user_id, set_label">
SELECT   PN.ID || '|' || PE.ID AS ID,
         PN.ID AS pn_id,
         PE.ID AS pe_id,
         PN.NAME,
         PE.VERSION,
         PE.release,
         PE.epoch,
         X.num_systems
    FROM rhnPackageName PN,
         rhnPackageEVR PE,
         (SELECT   SP.name_id,
                   SP.evr_id,
                   COUNT (SP.server_id) num_systems
              FROM rhnServerPackage SP,
                   rhnSet S,
                   rhnClientCapabilityName CCN,
                   rhnClientCapability CC
             WHERE s.user_id = :user_id
               AND s.label = :set_label
               AND s.ELEMENT = SP.server_id
               AND SP.server_id = CC.server_id
               AND CC.capability_name_id = CCN.id
               AND CCN.name = 'packages.verify'
          GROUP BY SP.name_id,
                   SP.evr_id) X
   WHERE PE.ID = X.evr_id
     AND PN.ID = X.name_id
ORDER BY UPPER (PN.NAME)
  </query>
</mode>

<mode name="packages_in_set"  class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="set_label, user_id">
  SELECT  PN.id || '|' || PE.id AS ID_COMBO, PN.name || '-' || PE.evr.as_vre_simple() AS NVRE
    FROM  rhnPackageName PN, rhnPackageEVR PE, rhnSet S
   WHERE  S.label = :set_label
     AND  S.user_id = :user_id
     AND  S.element = PN.id
     AND  S.element_two = PE.id
ORDER BY  UPPER(NVRE)
  </query>
</mode>

<mode name="package_ids_in_set" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="set_label, user_id">
  SELECT  P.id AS ID, PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA
    FROM  rhnPackage P,
          rhnPackageName PN,
          rhnPackageEVR PE,
          rhnPackageArch PA,
          rhnSet S
   WHERE  S.label = :set_label
     AND  S.user_id = :user_id
     AND  S.element = P.id
     AND  P.name_id = PN.id
     AND  P.evr_id = PE.id
     AND  PA.id = P.package_arch_id
ORDER BY  UPPER(NVREA)
  </query>
  <elaborator name="package_details" />
  <elaborator name="package_channels" />
</mode>

<mode name="packages_owned_by_org">
  <query params="org_id">
  SELECT DISTINCT P.id id, PN.name || '-' || PE.version 
           || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END) 
           || '-' || PA.label package_nvre
    FROM rhnPackageName PN,
         rhnPackageEVR PE,
         rhnPackageArch PA,
         rhnPackage P
   WHERE P.org_id = :org_id
     AND PN.id = P.name_id
     AND PE.id = P.evr_id
     AND PA.id = P.package_arch_id
ORDER BY UPPER(PN.name || '-' || PE.version || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END)  || '-' || PA.label)
  </query>
  <elaborator name="package_channels" />
</mode>

<mode name="packages_available_to_errata" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="org_id, eid">
SELECT DISTINCT P.id id, PN.name || '-' || PE.version 
           || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END) 
           || '-' || PA.label PACKAGE_NVRE
    FROM rhnPackageName PN,
         rhnPackageEVR PE,
         rhnPackageArch PA,
       rhnArchType PAT,
         rhnPackage P
   WHERE P.org_id = :org_id
     AND PN.id = P.name_id
     AND PE.id = P.evr_id
     AND PA.id = P.package_arch_id
     AND PA.arch_type_id = PAT.id
   AND PAT.label = 'rpm'
     AND NOT EXISTS (SELECT 1
                       FROM rhnErrataPackage EP
                      WHERE EP.errata_id = :eid
                        AND EP.package_id = P.id)
ORDER BY UPPER(PACKAGE_NVRE)
  </query>
  <elaborator name="package_channels" />
</mode>

<mode name="packages_available_to_tmp_errata"  class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="org_id, eid">
  SELECT DISTINCT P.id ID,
                  PN.name || '-' || PE.version || '-' || PE.release
                    || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END) 
                    || '-' || PA.label PACKAGE_NVRE
    FROM rhnPackageName PN,
         rhnPackageEVR PE,
         rhnPackageArch PA,
     rhnArchType PAT,
         rhnPackage P
   WHERE P.org_id = :org_id
     AND PN.id = P.name_id
     AND PE.id = P.evr_id
     AND PA.id = P.package_arch_id
   AND PA.arch_type_id = PAT.id
   AND PAT.label = 'rpm'
     AND NOT EXISTS (SELECT 1
                       FROM rhnErrataPackageTmp EP
                      WHERE EP.errata_id = :eid
                        AND EP.package_id = P.id)
ORDER BY UPPER(PACKAGE_NVRE)
  </query>
  <elaborator name="package_channels" />
</mode>

<mode name="packages_available_to_errata_in_channel" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="source_cid, target_eid">
SELECT P.id AS ID,
       PN.name || '-' || PE.evr.as_vre_simple() AS PACKAGE_NVRE,
       P.summary
  FROM rhnPackageName PN, rhnPackageEVR PE, rhnPackage P,
       rhnChannelPackage CP
 WHERE CP.channel_id = :source_cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND NOT EXISTS (SELECT 1
              FROM rhnErrataPackage EP
             WHERE EP.errata_id = :target_eid
               AND EP.package_id = P.id)
ORDER BY UPPER(PACKAGE_NVRE)
  </query>
  <elaborator name="package_channels" />
</mode>

<mode name="packages_available_to_tmp_errata_in_channel" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="source_cid, target_eid">
SELECT P.id AS ID,
       PN.name || '-' || PE.evr.as_vre_simple() AS PACKAGE_NVRE,
       P.summary
  FROM rhnPackageName PN, rhnPackageEVR PE, rhnPackage P,
       rhnChannelPackage CP
 WHERE CP.channel_id = :source_cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND NOT EXISTS (SELECT 1
              FROM rhnErrataPackagetmp EP
             WHERE EP.errata_id = :target_eid
               AND EP.package_id = P.id)
ORDER BY UPPER(PACKAGE_NVRE)
  </query>
  <elaborator name="package_channels" />
</mode>

<query name="package_channels" params="org_id" 
     multiple="t"
     class="com.redhat.rhn.frontend.dto.PackageOverview">
SELECT CP.package_id id, C.name package_channels
  FROM rhnChannel C, rhnChannelPackage CP
 WHERE CP.package_id IN(%s)
   AND C.id = CP.channel_id
   AND (EXISTS (SELECT 1
                  FROM rhnChannelFamilyPermissions CFP,
                       rhnChannelFamilyMembers CFM
                 WHERE CFP.org_id = :org_id
                   AND CFM.channel_family_id = CFP.channel_family_id
                   AND CFM.channel_id = C.id)
       OR C.org_id is NULL)
</query>

<query name="package_details" params="">
SELECT P.id, P.summary, PP.name as provider
  FROM rhnPackage P left join
       rhnPackageKeyAssociation assoc on assoc.package_id = P.id left join
       rhnPackageKey KEY on KEY.id = assoc.key_id left join
       rhnPackageProvider PP on key.provider_id = PP.id  left join
       rhnPackageKeyType KEYT on KEY.key_type_id = KEYT.id
 WHERE ( KEYT.label = 'gpg' or KEYT.label is NULL)   and
		 P.id IN(%s)
</query>


<mode name="managed_packages_in_channel">
  <query params="channel_id, org_id">
  SELECT DISTINCT CP.package_id id, PN.name || '-' || PE.version ||
    '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':'
    || PE.epoch END) || '-' || PA.label package_nvre
    FROM rhnPackageName PN,
         rhnPackageEVR PE,
         rhnPackageArch PA,
         rhnPackage P,
         rhnChannelPackage CP
   WHERE CP.channel_id = :channel_id
     AND CP.package_id = P.id
     AND PN.id = P.name_id
     AND PE.id = P.evr_id
     AND PA.id = P.package_arch_id
     AND P.org_id = :org_id
ORDER BY UPPER(PN.name || '-' || PE.version || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END)  || '-' || PA.label)
  </query>
  <elaborator name="package_channels" />
</mode>

<mode name="packages_in_no_channels_owned_by_org">
  <query params="org_id">
  SELECT DISTINCT P.id, PN.name || '-' || PE.version || '-' ||
    PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' ||
    PE.epoch END) || '-' || PA.label package_nvre
    FROM rhnPackageName PN,
         rhnPackageEVR PE,
         rhnPackageArch PA,
         rhnPackage P
   WHERE P.org_id = :org_id
     AND PN.id = P.name_id
     AND PE.id = P.evr_id
     AND PA.id = P.package_arch_id
     AND NOT EXISTS (SELECT 1
                       FROM rhnChannelPackage CP
                      WHERE P.id = CP.package_id)
ORDER BY UPPER(PN.name || '-' || PE.version || '-' || PE.release || (CASE WHEN PE.epoch IS NULL THEN '' ELSE ':' || PE.epoch END)  || '-' || PA.label)
  </query>
</mode>

<mode name="packages_available_to_channel">
  <query params="source_cid, target_cid">
SELECT DISTINCT P.id,
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS PACKAGE_NVREA,
       P.summary
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageArch PA,
       rhnChannelPackageArchCompat CPAC,
       rhnChannel C2,
       rhnPackage P,
       rhnChannel C,
       rhnChannelPackage CP
 WHERE CP.channel_id = :source_cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND P.package_arch_id = PA.id
   AND C2.id = :target_cid
   AND CPAC.channel_arch_id = C2.channel_arch_id
   AND CPAC.package_arch_id = P.package_arch_id
   AND NOT EXISTS (SELECT 1
                     FROM rhnChannelPackage CP2
                    WHERE CP2.channel_id = C2.id
                      AND CP2.package_id = P.id)
ORDER BY UPPER(PACKAGE_NVREA)
  </query>
  <elaborator name="package_channels" />
</mode>

<mode name="unused_packages_available_to_channel">
  <query params="org_id, cid">
  SELECT DISTINCT P.id,
         PN.name || '-' || PE.evr.as_vre_simple() || '-' || PA.label PACKAGE_NVREA
    FROM rhnPackageName PN,
         rhnPackageEVR PE,
         rhnPackageArch PA,
         rhnPackage P,
         rhnChannel C,
         rhnChannelPackageArchCompat CPAC
   WHERE P.org_id = :org_id
     AND PN.id = P.name_id
     AND PE.id = P.evr_id
     AND PA.id = P.package_arch_id
     AND C.id = :cid
     AND CPAC.channel_arch_id = C.channel_arch_id
     AND CPAC.package_arch_id = P.package_arch_id
     AND NOT EXISTS (SELECT 1
                       FROM rhnChannelPackage CP
                      WHERE P.id = CP.package_id)
ORDER BY UPPER(PACKAGE_NVREA)
  </query>
</mode>

<mode name="all_packages_available_to_channel">
  <query params="org_id, cid">
  SELECT DISTINCT P.id,
         PN.name || '-' || PE.evr.as_vre_simple() || '-' || PA.label PACKAGE_NVREA
    FROM rhnPackageName PN,
         rhnPackageEVR PE,
         rhnPackageArch PA,
         rhnPackage P,
         rhnChannel C,
         rhnChannelPackageArchCompat CPAC
   WHERE P.org_id = :org_id
     AND PN.id = P.name_id
     AND PE.id = P.evr_id
     AND PA.id = P.package_arch_id
     AND C.id = :cid
     AND CPAC.channel_arch_id = C.channel_arch_id
     AND CPAC.package_arch_id = P.package_arch_id
ORDER BY UPPER(PACKAGE_NVREA)
  </query>
  <elaborator name="package_channels" />
</mode>

<mode name="system_available_packages"  class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="sid">
SELECT  pn.name AS NAME,
        pn.name || '-' || full_list.evr.version || '-' || full_list.evr.release || DECODE(full_list.evr.epoch, NULL, '', ':' || full_list.evr.epoch) AS NVRE,
        pn.id || '|' || lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release) AS ID_COMBO,
        pa.name as ARCH
  FROM  (
         SELECT  p.name_id name_id, max(pe.evr) evr
           FROM  rhnPackageEVR PE, rhnPackage P,
                 rhnChannelPackage CP, rhnServerChannel SC
          WHERE  sc.server_id = :sid
            AND  sc.channel_id = cp.channel_id
            AND  cp.package_id = p.id
            AND  p.evr_id = pe.id
       GROUP BY  p.name_id
       ) full_list,
       rhnPackageName pn
     INNER JOIN rhnPackage PKG ON pkg.name_id = pn.id
     INNER JOIN rhnPackageArch PA ON pa.id = pkg.package_arch_id
 WHERE  full_list.name_id = pn.id
   AND  full_list.name_id NOT IN (SELECT SP.name_id FROM rhnServerPackage SP WHERE SP.server_id = :sid)
ORDER BY  UPPER(pn.name)
  </query>
</mode>

<mode name="lookup_id_combo_by_name">
<query params="sid, name">
SELECT  pn.id as name_id, lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release) AS evr_id
  FROM  (
         SELECT  p.name_id name_id, max(pe.evr) evr
           FROM  rhnPackageEVR PE, rhnPackage P,
                 rhnChannelPackage CP, rhnServerChannel SC
          WHERE  sc.server_id = :sid
            AND  sc.channel_id = cp.channel_id
            AND  cp.package_id = p.id
            AND  p.evr_id = pe.id
       GROUP BY  p.name_id
       ) full_list,
       rhnPackageName pn
 WHERE  full_list.name_id = pn.id
   AND  pn.name = :name
  </query>
</mode>

<mode name="system_all_available_packages">
  <query params="sid">
SELECT  pn.name AS NAME,
        pn.name || '-' || full_list.evr.version || '-' || full_list.evr.release || DECODE(full_list.evr.epoch, NULL, '', ':' || full_list.evr.epoch) AS NVRE,
        full_list.name_id || '|' || full_list.evr_id AS ID,
        full_list.id AS REAL_ID
  FROM  (
         SELECT  p.name_id name_id, p.id, p.evr_id, max(pe.evr) evr
           FROM  rhnPackageEVR PE, rhnPackage P,
                 rhnChannelPackage CP, rhnServerChannel SC
          WHERE  sc.server_id = :sid
            AND  sc.channel_id = cp.channel_id
            AND  cp.package_id = p.id
            AND  p.evr_id = pe.id
       GROUP BY  p.name_id, p.id, p.evr_id
       ) full_list,
       rhnPackageName pn
 WHERE  full_list.name_id = pn.id
   AND  NOT EXISTS (SELECT 1
                      FROM rhnServerPackage SP, rhnPackageEVR PE2
                     WHERE SP.server_id = :sid
                       AND SP.name_id = full_list.name_id
                       AND SP.evr_id = PE2.id
                       AND PE2.evr &gt;= full_list.evr)
ORDER BY  UPPER(pn.name), full_list.evr
  </query>
</mode>

<mode name="ssm_packages_for_upgrade">
  <query params="user_id">
SELECT  P.id AS ID,
        PN.id AS PN_ID,
        PE.id AS PE_ID,
        PN.id || '|' || PE.id AS ID_COMBO,
        PE.version AS PACKAGE_VERSION,
        PE.release AS PACKAGE_RELEASE,
        PE.epoch AS PACKAGE_EPOCH,
        PN.name AS PACKAGE_NAME,
        E.advisory_type,
        E.advisory,
        E.id AS ADVISORY_ID,
        COUNT(DISTINCT SNPC.server_id) NUM_SYSTEMS
  FROM  rhnErrata E,
        rhnPackageEVR PE,
        rhnPackageName PN,
        rhnPackage P,
        rhnServerNeededPackageCache SNPC,
        rhnSet S
 WHERE  S.user_id = :user_id
   AND  S.label = 'system_list'
   AND  S.element = SNPC.server_id
   AND  SNPC.package_id = P.id
   AND  P.name_id = PN.id
   AND  P.evr_id = PE.id
   AND  SNPC.errata_id = E.id (+)
GROUP BY P.id,
         PN.name,
         PE.version,
         PE.release,
         PE.epoch,
         PN.id,
         PE.id,
         E.advisory_type,
         E.advisory,
         E.id
ORDER BY UPPER(PN.name), UPPER(PE.version), UPPER(PE.release), UPPER(PE.epoch)
  </query>
</mode>

<mode name="count_system_upgradable_package_list">
  <query params="sid">
SELECT  COUNT(pn.id) AS COUNT
  FROM  rhnPackageName PN,
        (
         SELECT  SOP.package_name_id AS name_id, MAX(PE.evr) evr
           FROM  rhnPackageEVR PE, rhnServerOutdatedPackages SOP
          WHERE  SOP.server_id = :sid
            AND  SOP.package_evr_id = PE.id
       GROUP BY  SOP.package_name_id
         ) full_list
 WHERE  full_list.name_id = PN.id
ORDER BY  UPPER(PN.name)
  </query>
</mode>
   
<mode name="system_upgradable_package_list" class="com.redhat.rhn.frontend.dto.UpgradablePackageListItem">
  <query params="sid">
SELECT  pn.id AS id,
        pn.name AS name,
        pn.id || '|' || lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release) AS id_combo
  FROM  rhnPackageName PN,
        (
         SELECT  SOP.package_name_id AS name_id, MAX(PE.evr) evr
           FROM  rhnPackageEVR PE, rhnServerOutdatedPackages SOP
          WHERE  SOP.server_id = :sid
            AND  SOP.package_evr_id = PE.id
       GROUP BY  SOP.package_name_id
         ) full_list
 WHERE  full_list.name_id = PN.id
ORDER BY  UPPER(PN.name)
  </query>
  <elaborator params="sid" multiple="t">
SELECT  PN.id AS id,
        PN.id as name_id,
        pn.name ||'-'|| full_list.evr.version || '-' || full_list.evr.release || DECODE(full_list.evr.epoch, NULL, '', ':' || full_list.evr.epoch) AS nvre,
        lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release) AS evr_id,
        PN.name || '-' || SPE.evr.as_vre_simple() AS installed,
        full_list.server_id SERVER_ID,
        full_list.errata_id ERRATA_ID,
        full_list.errata_advisory ERRATA_ADVISORY,
        full_list.evr.epoch EPOCH,
        full_list.evr.version VERSION,
        full_list.evr.release RELEASE,
        E.advisory_type ERRATA_ADVISORY_TYPE
  FROM  rhnErrata E,
        rhnPackageName PN,
        rhnPackageEVR PE,
        rhnPackageEVR SPE,
        rhnServerPackage SP,
        (
         SELECT  SOP.package_name_id name_id, MAX(peD.evr) evr,
                 SOP.server_id server_id, SOP.errata_id errata_id, 
                 SOP.errata_advisory errata_advisory
           FROM  rhnPackageEVR PED, rhnServerOutdatedPackages SOP
          WHERE  SOP.server_id = :sid
            AND  SOP.package_evr_id = PED.id
       GROUP BY  SOP.package_name_id, SOP.server_id, SOP.errata_id, SOP.errata_advisory
         ) full_list
 WHERE  PN.id IN (%s)
   AND  PN.id = full_list.name_id
   AND  full_list.errata_id = E.id (+)
   AND  PE.id = lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release)
   AND  SP.name_id = PN.id
   AND  SP.server_id = :sid
   AND  SPE.id = SP.evr_id
   AND  SPE.evr &lt; PE.evr
  </elaborator>
</mode>

<mode name="system_upgradable_package_list_no_errata_info">
  <query params="sid">
SELECT  distinct
        pn.name,
        NVL(PE.epoch, ' ') as FROM_EPOCH,
        NVL(PE.version, ' ') as FROM_VERSION,
        NVL(PE.release, ' ') as FROM_RELEASE,
        NVL(full_list.evr.epoch, ' ') as TO_EPOCH,
        NVL(full_list.evr.version, ' ') as TO_VERSION,
        NVL(full_list.evr.release, ' ') as TO_RELEASE,
        P.id as TO_PACKAGE_ID
  FROM  (
         SELECT  SOP.package_name_id name_id,
                 MAX(pe.evr) evr,
                 SOP.server_id server_id,
                 SOP.errata_id errata_id,
                 SOP.errata_advisory errata_advisory,
                 pe.id as evr_id
           FROM  rhnPackageEVR PE, rhnServerOutdatedPackages SOP
          WHERE  SOP.server_id = :sid
            AND  SOP.package_evr_id = PE.id
       GROUP BY  SOP.package_name_id, SOP.server_id, SOP.errata_id,
        SOP.errata_advisory, pe.id
        ) full_list,
        rhnPackageEVR PE,
        rhnPackageName PN,
        rhnChannelNewestPackage CNP,
        rhnServerChannel SC,
        rhnServerPackage SP,
        rhnPackage P
 WHERE  SC.server_id = :sid
   AND  SP.server_id = :sid
   AND  SP.name_id = PN.id
   AND  SP.evr_id = PE.id
   AND  SC.channel_id = CNP.channel_id
   AND  CNP.name_id = full_list.name_id
   AND  CNP.evr_id = full_list.evr_id
   AND  full_list.name_id = PN.id
   AND  P.evr_id = full_list.evr_id
   AND  P.name_id = PN.id
  </query>
</mode>

<mode name="package_download_for_system_arch_select" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="set_label, user_id, sid">
SELECT P.id, PN.name || '-' || PEVR.evr.as_vre_simple() as NVRE,
  PA.label as ARCH, P.path
  FROM rhnPackage P,
       rhnPackageName PN,
       rhnPackageEVR PEVR,
       rhnPackageArch PA,
       rhnSet S
 WHERE S.label = :set_label
   AND S.user_id = :user_id
   AND PN.id = S.element
   AND PEVR.id = S.element_two
   AND P.name_id = PN.id
   AND P.evr_id = PEVR.id
   AND P.package_arch_id = PA.id
   AND EXISTS (SELECT 1 FROM rhnServerNeededPackageCache SNPC WHERE SNPC.server_id = :sid AND SNPC.package_id = P.id)
  </query>
  <elaborator multiple="t" params="sid">
SELECT CP.package_id as ID,
       C.name as CHANNEL_NAME,
       C.id as CHANNEL_ID
  FROM rhnServerChannel SC, rhnChannelPackage CP, rhnChannel C
 WHERE CP.package_id in (%s)
   AND C.id = CP.channel_id
   AND SC.server_id = :sid
   AND SC.channel_id = C.id
  </elaborator>
</mode>


<mode name="packages_associated_with_action">
  <query params="aid">
SELECT  DISTINCT PN.id || '|' || PE.id AS ID, PN.name || '-' || PE.evr.as_vre_simple() AS NVRE
  FROM  rhnPackageName PN,
        rhnPackageEVR PE,
        rhnActionPackage AP
 WHERE  AP.action_id = :aid
   AND  PN.id = AP.name_id
   AND  PE.id = AP.evr_id
ORDER BY  UPPER(NVRE)
  </query>
</mode>

<mode name="channel_errata_comparison">
  <query params="eid, cid">
SELECT P1.id,
       PN.name NAME,
       PE1.evr.as_vre_simple() || '-' || PA.label ERRATA_VERSION,
       PE2.evr.as_vre_simple() || '-' || PA.label CHANNEL_VERSION
  FROM rhnPackageName PN,
       rhnPackageEVR PE2,
       rhnPackage P2,
       rhnChannelPackage CP,
       rhnPackageArch PA,
       rhnPackageEVR PE1,
       rhnPackage P1,
       rhnErrataPackageTmp EP
 WHERE 1=1
   AND EP.errata_id = :eid
   AND EP.package_id = P1.id
   AND P1.name_id = P2.name_id
   AND P1.package_arch_id = P2.package_arch_id
   AND CP.channel_id = :cid
   AND CP.package_id = P2.id
   AND P1.evr_id != P2.evr_id
   AND P2.evr_id = PE2.id
   AND PE2.evr = (SELECT max(SQ_PE.evr)
                    FROM rhnPackageEVR SQ_PE,
                         rhnPackage SQ_P,
                         rhnChannelPackage SQ_CP
                   WHERE 1=1
                     AND SQ_CP.channel_id = :cid
                     AND SQ_CP.package_id = SQ_P.id
                     AND P2.name_id = SQ_P.name_id
                     AND P2.package_arch_id = SQ_P.package_arch_id
                     AND SQ_P.evr_id = SQ_PE.id)
   AND P1.evr_id = PE1.id
   AND rpm.vercmp(PE1.epoch, PE1.version, PE1.release,
                  PE2.epoch, PE2.version, PE2.release) > 0
   AND P1.name_id = PN.id
   AND P1.package_arch_id = PA.id
ORDER BY PN.name, PE2.evr.as_vre_simple() || '-' || PA.label
  </query>
</mode>

<mode name="channel_errata_intersection">
  <query params="eid, cid">
SELECT P1.id,
       PN.name NAME,
       PE1.evr.as_vre_simple() || '-' || PA.label ERRATA_VERSION,
       PE2.evr.as_vre_simple() || '-' || PA.label CHANNEL_VERSION
  FROM rhnPackageName PN,
       rhnPackageEVR PE2,
       rhnChannelNewestPackage CNP,
       rhnPackageArch PA,
       rhnPackageEVR PE1,
       rhnPackage P1,
       rhnErrataPackageTmp EP
 WHERE 1=1
   AND EP.errata_id = :eid
   AND EP.package_id = P1.id
   AND CNP.channel_id = :cid
   AND P1.name_id = CNP.name_id
   AND CNP.evr_id = PE2.id
   AND P1.package_arch_id = CNP.package_arch_id
   AND P1.evr_id = PE1.id
   AND P1.name_id = PN.id
   AND P1.package_arch_id = PA.id
ORDER BY PN.name, PE2.evr.as_vre_simple() || '-' || PA.label
  </query>
</mode>

<mode name="channel_errata_full_intersection">
  <query params="eid, cid">
SELECT P.id,
       PN.name NAME,
       PE.evr.as_vre_simple() || '-' || PA.label VERSION
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageArch PA,
       rhnChannelPackage CP,
       rhnPackage P,
       rhnErrataPackage EP
 WHERE EP.errata_id = :eid
   AND CP.channel_id = :cid
   AND EP.package_id = CP.package_id
   AND P.id = EP.package_id
   AND PE.id = P.evr_id
   AND PA.id = P.package_arch_id
   AND PN.id = P.name_id
ORDER BY PN.name, PE.evr.as_vre_simple() || '-' || PA.label
  </query>
</mode>

<mode name="packages_only_in_channel">
  <query params="cid, org_id">
SELECT CP.package_id AS ID
  FROM rhnChannelPackage CP, rhnPackage P
 WHERE CP.channel_id = :cid
   AND NOT EXISTS(SELECT 1
                    FROM rhnChannelPackage CP2
                   WHERE CP2.package_id = CP.package_id
                     AND CP2.channel_id != CP.channel_id)
   AND P.id = CP.package_id
   AND P.org_id = :org_id
  </query>
</mode>

<mode name="missing_packages_for_session">
  <query params="">
-- dummy
  </query>
</mode>

<mode name="missing_packages_for_sync">
  <query params="">
-- dummy
  </query>
</mode>

<mode name="latest_package_in_channel_tree">
  <query params="user_id, cid, package_name">
SELECT NEWEST.package_id AS id, NEWEST.channel_id
  FROM (SELECT CP.package_id, CP.channel_id,
               RANK() OVER (PARTITION BY P.name_id, P.package_arch_id ORDER BY PE.evr DESC) AS DEPTH
          FROM rhnPackage P,
               rhnPackageName PN,
               rhnPackageEVR PE,
               rhnChannelPackage CP,
               rhnChannel C,
               rhnUserAvailableChannels UAC
          WHERE UAC.user_id = :user_id
            AND UAC.channel_id = C.id
            AND (C.id = :cid OR C.parent_channel = :cid)
            AND CP.channel_id = C.id
            AND CP.package_id = P.id
            AND P.evr_id = PE.id
            AND P.name_id = PN.id
            AND PN.name = :package_name
            AND UPPER(UAC.channel_label) NOT LIKE '%BETA%'
            AND UPPER(UAC.channel_name) NOT LIKE '%BETA%'
       ) NEWEST
  WHERE NEWEST.depth = 1
  </query>
</mode>

<mode name="package_verification_results">
  <query params="sid, action_id">
SELECT SAVR.mode_differs,
       SAVR.size_differs,
       SAVR.md5_differs,
       SAVR.uid_differs,
       SAVR.gid_differs,
       SAVR.mtime_differs,
       SAVR.devnum_differs,
       SAVR.readlink_differs,
       NULL AS MISSING,
       PC.name FILENAME,
       PN.name PACKAGE_NAME,
       PE.evr.as_vre_simple() PACKAGE_EVR,
       PA.label PACKAGE_ARCH
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageArch PA,
       rhnPackageCapability PC,
       rhnServerActionVerifyResult SAVR
 WHERE server_id = :sid
   AND action_id = :action_id
   AND PN.id = SAVR.package_name_id
   AND PE.id = SAVR.package_evr_id
   AND PA.id = SAVR.package_arch_id
   AND PC.id = SAVR.package_capability_id
UNION
SELECT 'N' AS mode_differs,
       'N' AS size_differs,
       'N' AS md5_differs,
       'N' AS uid_differs,
       'N' AS gid_differs,
       'N' AS mtime_differs,
       'N' AS devnum_differs,
       'N' AS readlink_differs,
       1 AS MISSING,
       PC.name FILENAME,
       PN.name PACKAGE_NAME,
       PE.evr.as_vre_simple() PACKAGE_EVR,
       PA.label PACKAGE_ARCH
  FROM rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageArch PA,
       rhnPackageCapability PC,
       rhnServerActionVerifyMissing SAVM
 WHERE SAVM.server_id = :sid
   AND SAVM.action_id = :action_id
   AND PN.id = SAVM.package_name_id
   AND PE.id = SAVM.package_evr_id
   AND PA.id = SAVM.package_arch_id
   AND PC.id = SAVM.package_capability_id
ORDER BY 10, 11, 12
  </query>
</mode>

<callable-mode name="lookup_evr">
    <query params="epoch, version, release">
        {:evrId = call lookup_evr(:epoch, :version, :release)}
    </query>
</callable-mode>

<mode name="search_by_id" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="pids, channel_arch_ids">
   SELECT DISTINCT PN.id, 
         PN.name PACKAGE_NAME,
         NVL(P.summary, ' ') SUMMARY
   FROM  rhnPackageName PN,
         rhnPackage P,
         rhnChannelPackage CP,
         rhnAvailableChannels AC,
         rhnChannelArch CA
  WHERE  P.id IN (:pids)
    AND  P.name_id = PN.id
    AND AC.channel_arch_id = CA.id
    AND AC.channel_id = CP.channel_id
    AND CP.package_id = P.id
    AND CA.label in (:channel_arch_ids)
  </query>
</mode>

<mode name="search_name_and_summary_arches" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="org_id, search_string, ia32, ia64, x86_64">
SELECT DISTINCT PN.id, PN.name PACKAGE_NAME
  FROM rhnPackageName PN,
       rhnPackage P,
       rhnChannelPackage CP,
       rhnAvailableChannels AC,
       rhnPackageEVR PEVR
 WHERE P.id = CP.package_id
   AND CP.channel_id = AC.channel_id
   AND AC.org_id = :org_id
   AND PN.id = P.name_id
   AND P.evr_id = PEVR.id
                                                <!-- Any of these variables could = '' -->
   AND AC.channel_arch_id IN (SELECT id FROM rhnChannelArch WHERE label IN (:ia32, :ia64, :x86_64))
   AND (   INSTR(UPPER(PN.name  ), UPPER(:search_string)) > 0
        OR INSTR(UPPER(P.summary), UPPER(:search_string)) > 0
        OR INSTR(UPPER(PN.name || '-' || PEVR.evr.as_vre_simple()), 
            UPPER(:search_string)) > 0
       )
ORDER BY UPPER(PN.name)
  </query>
  <elaborator name="package_search_elaborator" />
</mode>

<mode name="compatible_package_arches">
  <query>
SELECT DISTINCT pa.label, pa.name
  FROM rhnPackageArch pa,
       rhnChannelPackageArchCompat cpac,
       rhnChannelArch ca
 WHERE pa.id = cpac.package_arch_id
   AND cpac.channel_arch_id = ca.id
   AND ca.label
    IN (%s)
  </query>
</mode>

<mode name="search_name_and_summary_relevant" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="org_id, search_string">
SELECT DISTINCT PN.id, PN.name PACKAGE_NAME
  FROM rhnPackageName PN,
       rhnPackage P,
       rhnChannelPackage CP,
       rhnServerChannel SC,
       rhnServer S,
       rhnPackageEVR PEVR
 WHERE S.org_id = :org_id
   AND S.id = SC.server_id
   AND SC.channel_id = CP.channel_id
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PEVR.id
   AND (   INSTR(UPPER(PN.name  ), UPPER(:search_string)) > 0
        OR INSTR(UPPER(P.summary), UPPER(:search_string)) > 0
        OR INSTR(UPPER(PN.name || '-' || PEVR.evr.as_vre_simple()), 
            UPPER(:search_string)) > 0
       )
ORDER BY UPPER(PN.name)
  </query>
  <elaborator name="package_search_elaborator" />
</mode>

<mode name="search_name_arches" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="org_id, search_string, ia32, ia64, x86_64">
SELECT DISTINCT PN.id, PN.name PACKAGE_NAME
  FROM rhnPackageName PN,
       rhnPackage P,
       rhnChannelPackage CP,
       rhnAvailableChannels AC
 WHERE P.id = CP.package_id
   AND CP.channel_id = AC.channel_id
   AND AC.org_id = :org_id
                                                   <!-- Any of these variables could = '' -->
   AND AC.channel_arch_id IN (SELECT id FROM rhnChannelArch WHERE label IN (:ia32, :ia64, :x86_64))
   AND PN.id = P.name_id
   AND INSTR(UPPER(PN.name), UPPER(:search_string)) > 0
ORDER BY UPPER(PN.name)
  </query>
  <elaborator name="package_search_elaborator" />
</mode>

<mode name="search_name_relevant" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="org_id, search_string">
SELECT DISTINCT PN.id, PN.name PACKAGE_NAME
  FROM rhnPackageName PN,
       rhnPackage P,
       rhnChannelPackage CP,
       rhnAvailableChannels AC
 WHERE P.id = CP.package_id
   AND CP.channel_id = AC.channel_id
   AND AC.org_id = :org_id
   AND PN.id = P.name_id
   AND AC.current_members > 0
   AND INSTR (UPPER(PN.name), UPPER(:search_string)) > 0
ORDER BY UPPER(PN.name)
  </query>
  <elaborator name="package_search_elaborator" />
</mode>
<!-- END OF SEARCH QUERIES -->

<mode name="system_patch_list" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="sid">
SELECT PN.id as ID,
       PN.id || '|' || PE.id AS ID_COMBO,
      PN.name || '-' || PE.evr.as_vre_simple() AS NVRE,
      PN.name AS name,
      PE.version,
      PE.release,
      PE.epoch,
      PN.id AS NAME_ID,
      PE.id AS EVR_ID,
        nvl( (select spt.name                 from rhnSolarisPatchType spt,
                   rhnSolarisPatch RSP,
                         rhnPackage p
             where RSP.package_id = p.id
         and P.name_id = SP.name_id
               and P.evr_id = SP.evr_id
               and P.package_arch_id = SP.package_arch_id
               and RSP.patch_type = spt.id),
               'unknown') as PATCH_TYPE
FROM  rhnPackageName PN,
        rhnPackageEVR PE,
        rhnServerPackage SP
WHERE SP.server_id = :sid
 AND  SP.name_id = PN.id
 AND  SP.evr_id = PE.id
 AND  EXISTS ( SELECT  1
                 FROM  rhnPackageArch PA,
                       rhnArchType AT
                WHERE  PA.id = SP.package_arch_id
                  AND  AT.id = PA.arch_type_id
                  AND  AT.label = 'solaris-patch' )
ORDER BY UPPER(NVRE)
  </query>
  <elaborator params="sid" multiple="t">
      SELECT PN.id,
             TO_CHAR(SA.completion_time, 'YYYY-MM-DD HH:MI:SS') AS TIMESTAMP,             
             ACS.name AS ACTION_STATUS
      FROM   rhnActionStatus ACS,
             rhnActionPackage AP,
             rhnServerPackage SP,
             rhnPackageName PN,
             rhnServerAction SA
      WHERE  SA.server_id = :sid
      AND    SP.server_id = SA.server_id
      AND    PN.id IN (%s)
      AND    SP.name_id = PN.id
      AND    AP.action_id = SA.action_id
      AND    AP.name_id = SP.name_id
      AND    AP.evr_id = SP.evr_id
      AND    ACS.id = SA.status
      ORDER BY SA.completion_time desc
   </elaborator>
</mode>

<mode name="patches_in_set" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="set_label, user_id">
SELECT PN.id || '|' || PE.id AS ID_COMBO,
       PN.name || '-' || PE.evr.as_vre_simple() AS NVRE,
       PN.name AS name,
       PN.id AS NAME_ID,
       PE.id AS EVR_ID,
       nvl( (select spt.name
               from rhnSolarisPatchType spt,
                    rhnSolarisPatch RSP,
                    rhnPackage p
              where RSP.package_id = p.id
              and P.name_id = PN.id
                and P.evr_id = PE.id
                and RSP.patch_type = spt.id),
                'unknown') as PATCH_TYPE                  
    FROM  rhnPackageName PN, rhnPackageEVR PE, rhnSet S
   WHERE  S.label = :set_label
     AND  S.user_id = :user_id
     AND  S.element = PN.id
     AND  S.element_two = PE.id
 ORDER BY UPPER(NVRE)
  </query>
</mode>

<mode name="system_solaris_package_list" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="sid">
SELECT  PN.id || '|' || PE.id AS ID_COMBO,
        PN.name || '-' || PE.evr.as_vre_simple() AS NVRE,
        PN.name AS name,
        PE.version,
        PE.release,
        PE.epoch,
        PN.id AS NAME_ID,
        PE.id AS EVR_ID,
        PA.LABEL as arch
  FROM  rhnServerPackage SP
  			INNER JOIN rhnPackageName PN ON SP.name_id = PN.id
  			INNER JOIN rhnPackageEVR PE ON SP.evr_id = PE.id
  			INNER JOIN rhnPackageArch PA ON PA.id = SP.package_arch_id
  			INNER JOIN rhnArchType AT ON AT.id = PA.arch_type_id
  WHERE  SP.server_id = :sid
	   AND  AT.label = 'sysv-solaris'
ORDER BY UPPER(NVRE)
  </query>
</mode>

<mode name="system_available_patch_list" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="sid">
SELECT  pn.name AS NAME,
        pn.name || '-' || full_list.evr.version || '-' || full_list.evr.release || DECODE(full_list.evr.epoch, NULL, '', ':' || full_list.evr.epoch) AS NVRE,
        pn.id || '|' || lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release) AS ID_COMBO, 
        full_list.id,
        full_list.PATCH_TYPE
  FROM  (
        SELECT  p.name_id name_id, max(pe.evr) evr, p.id, pt.name AS PATCH_TYPE
          FROM  rhnPackageEVR PE, rhnPackage P,
                 rhnChannelPackage CP, rhnServerChannel SC, rhnSolarisPatch SSP, rhnSolarisPatchType PT
         WHERE  sc.server_id = :sid
           AND  sc.channel_id = cp.channel_id
           AND  cp.package_id = p.id
           AND  ssp.package_id = p.id
           AND  p.evr_id = pe.id
           AND  pt.id = ssp.patch_type
      GROUP BY  p.name_id, p.id, pt.name
      ) full_list,
      rhnPackageName pn
 WHERE full_list.name_id = pn.id
   AND EXISTS (SELECT 1
            FROM rhnPackageNEVRA PNEVRA,
                 rhnSolarisPatchPackages SPP,
                 rhnServerPackage SP
          WHERE SP.server_id = :sid
            AND SPP.patch_id = full_list.id
            AND PNEVRA.id = SPP.package_nevra_id
            AND PNEVRA.name_id = SP.name_id
            AND PNEVRA.evr_id = SP.evr_id
            AND ((PNEVRA.package_arch_id IS NULL AND SP.package_arch_id IS NULL) OR PNEVRA.package_arch_id = SP.package_arch_id)
            AND NOT EXISTS (SELECT 1
                            FROM rhnSolarisPatchedPackage SPdP
                            WHERE SPdP.server_id = :sid
                            AND SPdP.patch_id = full_list.id
                            AND SPdP.package_nevra_id = PNEVRA.id))
ORDER BY  UPPER(NVRE)
  </query>
  <elaborator params="sid" multiple="t">
SELECT DISTINCT PN.name AS NAME,
       PN.name || '-' || PE.evr.as_vre_simple() AS ELAB_NVRE,
       PN.id || '|' || PE.id AS ELAB_ID_COMBO,
       SPP.patch_id as ID       
  FROM rhnPackage P,
       rhnPackageName PN,
       rhnPackageEVR PE,
       rhnPackageArch PA,
       rhnServerPackage SP,
       rhnPackageNEVRA PNEVRA,
       rhnServer S,
       rhnSolarisPatchPackages SPP
 WHERE SPP.patch_id IN (%s)
   AND S.id = :sid
   AND PNEVRA.id = SPP.package_nevra_id
   AND NOT EXISTS (SELECT 1
                     FROM rhnSolarisPatchedPackage SPdP
                    WHERE SPdP.server_id = :sid
                      AND SPdP.patch_id = SPP.patch_id
                      AND SPdP.package_nevra_id = PNEVRA.id)
   AND SP.server_id = S.id
   AND SP.name_id = PNEVRA.name_id
   AND SP.evr_id = PNEVRA.evr_id
   AND PN.id = PNEVRA.name_id
   AND PE.id = PNEVRA.evr_id
   AND P.name_id = SP.name_id
   AND p.evr_id = SP.evr_id
 ORDER BY PN.name
  </elaborator>
</mode>

<mode name="system_available_solaris_package_list" class="com.redhat.rhn.frontend.dto.PackageListItem">
  <query params="sid">
SELECT  pn.name AS NAME,
        pn.name || '-' || full_list.evr.version || '-' || full_list.evr.release || DECODE(full_list.evr.epoch, NULL, '', ':' || full_list.evr.epoch) AS NVRE,
        pn.id || '|' || lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release) AS ID_COMBO
        pa.name as ARCH
  FROM  (
         SELECT  p.name_id name_id, max(pe.evr) evr
           FROM  rhnPackageEVR PE, rhnPackage P,
                 rhnChannelPackage CP, rhnServerChannel SC, rhnSolarisPackage SSP
          WHERE  sc.server_id = :sid
            AND  sc.channel_id = cp.channel_id
            AND  cp.package_id = p.id
            AND  ssp.package_id = p.id
            AND  p.evr_id = pe.id
       GROUP BY  p.name_id
       ) full_list,
       rhnPackageName pn
     INNER JOIN rhnPackage PKG ON pkg.name_id = pn.id
     INNER JOIN rhnPackageArch PA ON pa.id = pkg.package_arch_id     
 WHERE  full_list.name_id = pn.id
   AND  full_list.name_id NOT IN (SELECT SP.name_id FROM rhnServerPackage SP WHERE SP.server_id = :sid)
ORDER BY  UPPER(pn.name)
  </query>
</mode>

<mode name="system_available_solaris_patchset_list" class="com.redhat.rhn.frontend.dto.SolarisPatchSet">
  <query params="sid">
  SELECT P.id,
         PN.name,
         SPS.set_date
    FROM rhnPackageName PN,
         rhnPackage P,
         rhnSolarisPatchSet SPS,
         rhnChannelPackage CP,
         rhnServerChannel SC
   WHERE SC.server_id = :sid
     AND CP.channel_id = SC.channel_id
     AND SPS.package_id = CP.package_id
     AND P.id = SPS.package_id
     AND PN.id = P.name_id
  </query>
  <elaborator params="sid" multiple="t">
SELECT P.id,
       NVL(SA.completion_time,
           NVL(SA.pickup_time,
               SA.created)) AS TIMESTAMP,
       ACS.name AS ACTION_STATUS
  FROM rhnActionStatus ACS,
       rhnActionPackage AP,
       rhnPackage P,
       rhnServerAction SA
 WHERE SA.server_id = :sid
   AND P.id IN (%s)
   AND AP.action_id = SA.action_id
   AND AP.name_id = P.name_id
   AND AP.evr_id = P.evr_id
   AND ACS.id = SA.status
ORDER BY SA.completion_time desc, SA.pickup_time desc, SA.created desc
  </elaborator>
</mode>

<mode name="package_available_to_user">
  <query params="pid, org_id">
SELECT 1
  FROM rhnPackage P
 WHERE p.id = :pid
   AND (   P.org_id = :org_id
        OR EXISTS (SELECT 1
                     FROM rhnChannelPackage CP,
                          rhnAvailableChannels AC
                    WHERE AC.org_id = :org_id
                      AND AC.channel_id = CP.channel_id
                      AND CP.package_id = :pid)
       )
  </query>
</mode>

<mode name="system_upgradable_solaris_package_list" class="com.redhat.rhn.frontend.dto.UpgradablePackageListItem">
  <query params="sid">
SELECT  P.id AS id,
        PN.name AS name,
        pn.id || '|' || lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release) AS id_combo
  FROM  rhnPackage P,
        rhnSolarisPackage SP,
        rhnPackageName PN,
        (
         SELECT  SOP.package_name_id AS name_id, MAX(PE.evr) evr
           FROM  rhnPackageEVR PE, rhnServerOutdatedPackages SOP
          WHERE  SOP.server_id = :sid
            AND  SOP.package_evr_id = PE.id
       GROUP BY  SOP.package_name_id
         ) full_list
 WHERE  full_list.name_id = PN.id
   AND  PN.id = P.name_id
   AND  P.evr_id = lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release)
   AND  P.id = SP.package_id
ORDER BY  UPPER(PN.name)
  </query>
  <elaborator params="sid" multiple="t">
SELECT  P.id AS id,
        PN.id as name_id,
        pn.name ||'-'|| full_list.evr.version || '-' || full_list.evr.release || DECODE(full_list.evr.epoch, NULL, '', ':' || full_list.evr.epoch) AS nvre,
        lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release) AS evr_id,
        PN.name || '-' || SPE.evr.as_vre_simple() AS installed,
        full_list.server_id SERVER_ID,
        full_list.errata_id ERRATA_ID,
        full_list.errata_advisory ERRATA_ADVISORY,
        full_list.evr.epoch EPOCH,
        full_list.evr.version VERSION,
        full_list.evr.release RELEASE,
        E.advisory_type ERRATA_ADVISORY_TYPE
  FROM  rhnErrata E,
        rhnPackage P,
        rhnPackageName PN,
        rhnPackageEVR PE,
        rhnPackageEVR SPE,
        rhnServerPackage SP,
        (
         SELECT  SOP.package_name_id name_id, MAX(peD.evr) evr,
                 SOP.server_id server_id, SOP.errata_id errata_id, 
                 SOP.errata_advisory errata_advisory
           FROM  rhnPackageEVR PED, rhnServerOutdatedPackages SOP
          WHERE  SOP.server_id = :sid
            AND  SOP.package_evr_id = PED.id
       GROUP BY  SOP.package_name_id, SOP.server_id, SOP.errata_id, SOP.errata_advisory
         ) full_list
 WHERE  P.id IN (%s)
   AND  P.name_id = PN.id
   AND  PN.id = full_list.name_id
   AND  full_list.errata_id = E.id (+)
   AND  PE.id = lookup_evr(full_list.evr.epoch, full_list.evr.version, full_list.evr.release)
   AND  SP.name_id = PN.id
   AND  SP.server_id = :sid
   AND  SPE.id = SP.evr_id
   AND  SPE.evr &lt; PE.evr
  </elaborator>
</mode>

<mode name="all_packages_in_channel_after">
  <query params="cid, start_date_str">
SELECT 
       P.id AS id,
       PN.name as name,
       NVL(PE.version, ' ') as version,
       NVL(PE.release, ' ') as release,
       NVL(PE.epoch, ' ') as epoch,
       PA.label AS arch_label,
       TO_CHAR(P.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified
  FROM rhnPackageArch PA, rhnPackageName PN, rhnPackageEVR PE, rhnPackage P,
       rhnChannelPackage CP
 WHERE CP.channel_id = :cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND PA.id = P.package_arch_id
   AND P.last_modified &gt;= TO_DATE(:start_date_str, 'YYYY-MM-DD HH24:MI:SS')
ORDER BY UPPER(name)
  </query>
</mode>


<mode name="all_packages_in_channel_between">
  <query params="cid, start_date_str, end_date_str">
    
SELECT 
       P.id AS id,
       PN.name as name,
       NVL(PE.version, ' ') as version,
       NVL(PE.release, ' ') as release,
       NVL(PE.epoch, ' ') as epoch,
       PA.label AS arch_label,
       TO_CHAR(P.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified
  FROM rhnPackageArch PA, rhnPackageName PN, rhnPackageEVR PE, rhnPackage P,
       rhnChannelPackage CP
 WHERE CP.channel_id = :cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND PA.id = P.package_arch_id
   AND P.last_modified &gt;= TO_DATE(:start_date_str, 'YYYY-MM-DD HH24:MI:SS')
      AND P.last_modified &lt;= TO_DATE(:end_date_str, 'YYYY-MM-DD HH24:MI:SS')
ORDER BY UPPER(name)
  </query>
</mode>

<mode name="all_packages_in_channel">
  <query params="cid">
SELECT P.id AS id,
       PN.name as name,
       NVL(PE.version, ' ') as version,
       NVL(PE.release, ' ') as release,
       NVL(PE.epoch, ' ') as epoch,
       PA.label AS arch_label,
       TO_CHAR(P.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified
  FROM rhnPackageArch PA, rhnPackageName PN, rhnPackageEVR PE, rhnPackage P,
       rhnChannelPackage CP
 WHERE CP.channel_id = :cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND PA.id = P.package_arch_id
ORDER BY UPPER(name)
  </query>
</mode>

<mode name="all_packages_in_channel_after_by_date">
  <query params="cid, start_date_str">
SELECT 
       P.id AS id,
       PN.name as name,
       NVL(PE.version, ' ') as version,
       NVL(PE.release, ' ') as release,
       NVL(PE.epoch, ' ') as epoch,
       PA.label AS arch_label,
       TO_CHAR(P.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified
  FROM rhnPackageArch PA, rhnPackageName PN, rhnPackageEVR PE, rhnPackage P,
       rhnChannelPackage CP
 WHERE CP.channel_id = :cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND PA.id = P.package_arch_id
   AND P.last_modified &gt;= TO_DATE(:start_date_str, 'YYYY-MM-DD HH24:MI:SS')
ORDER BY last_modified
  </query>
</mode>


<mode name="all_packages_in_channel_between_by_date">
  <query params="cid, start_date_str, end_date_str">
    
SELECT 
       P.id AS id,
       PN.name as name,
       NVL(PE.version, ' ') as version,
       NVL(PE.release, ' ') as release,
       NVL(PE.epoch, ' ') as epoch,
       PA.label AS arch_label,
       TO_CHAR(P.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified
  FROM rhnPackageArch PA, rhnPackageName PN, rhnPackageEVR PE, rhnPackage P,
       rhnChannelPackage CP
 WHERE CP.channel_id = :cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND PA.id = P.package_arch_id
   AND P.last_modified &gt;= TO_DATE(:start_date_str, 'YYYY-MM-DD HH24:MI:SS')
      AND P.last_modified &lt;= TO_DATE(:end_date_str, 'YYYY-MM-DD HH24:MI:SS')
ORDER BY last_modified
  </query>
</mode>

<mode name="all_packages_in_channel_by_date">
  <query params="cid">
SELECT 
       P.id AS id,
       PN.name as name,
       NVL(PE.version, ' ') as version,
       NVL(PE.release, ' ') as release,
       NVL(PE.epoch, ' ') as epoch,
       PA.label AS arch_label,
       TO_CHAR(P.last_modified, 'YYYY-MM-DD HH24:MI:SS') AS last_modified
  FROM rhnPackageArch PA, rhnPackageName PN, rhnPackageEVR PE, rhnPackage P,
       rhnChannelPackage CP
 WHERE CP.channel_id = :cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND PA.id = P.package_arch_id
ORDER BY last_modified
  </query>
</mode>

<mode name="possible_packages_for_pushing_into_channel" class="com.redhat.rhn.frontend.dto.PackageComparison">
  <query params="cid, eid">
SELECT P1.id, 
       PN.name,
       PE2.evr.as_vre_simple() AS current_nvre,
       PE1.evr.as_vre_simple() AS new_nvre
FROM rhnPackage P1,
     rhnPackageEVR PE1, 
     rhnChannelNewestPackage CNP, 
     rhnPackageEVR PE2, 
     rhnPackageName PN, 
     rhnErrataPackage EP
WHERE EP.errata_id = :eid
  AND P1.id = EP.package_id
  AND CNP.channel_id = :cid
  AND P1.name_id = CNP.name_id
  AND p1.package_arch_id = CNP.package_arch_id
  AND PE1.id = P1.evr_id
  AND PE2.id = CNP.evr_id
  AND PN.id = P1.name_id
  AND rpm.vercmp(PE1.epoch, PE1.version, PE1.release, PE2.epoch, PE2.version, PE2.release) > 0
  </query>
</mode>

  
<mode name="packages_in_errata_not_in_channel" class="com.redhat.rhn.frontend.dto.PackageComparison">
  <query params="cid, eid">
SELECT P.id,
       PN.name,
       NULL AS current_nvre,
       PE1.evr.as_vre_simple() AS new_nvre
FROM rhnPackage P,
  rhnErrataPackage EP,
  rhnPackageEVR PE1,
  rhnPackageName PN,
  rhnChannelPackageArchCompat pac,
  rhnChannel c 
WHERE EP.errata_id = :eid
  AND EP.package_id = P.id
  AND PE1.id = P.evr_id
  AND PN.id = P.name_id
  AND pac.channel_arch_id = c.channel_arch_id
  AND pac.package_arch_id = p.package_arch_id
  AND C.id = :cid
  AND P.id NOT IN (select package_id from rhnChannelPackage 
                    where CHANNEL_ID = :cid)
  AND P.ID NOT IN (
    SELECT P1.id
    FROM rhnPackage P1,
         rhnPackageEVR PE1, 
         rhnChannelNewestPackage CNP, 
         rhnPackageEVR PE2, 
         rhnPackageName PN, 
         rhnErrataPackage EP
    WHERE EP.errata_id = :eid
      AND P1.id = EP.package_id
      AND CNP.channel_id = :cid
      AND P1.name_id = CNP.name_id
      AND p1.package_arch_id = CNP.package_arch_id
      AND PE1.id = P1.evr_id
      AND PE2.id = CNP.evr_id
      AND PN.id = P1.name_id
      AND rpm.vercmp(PE1.epoch, PE1.version, PE1.release, PE2.epoch, PE2.version, PE2.release) != 0)
  </query>        
</mode>  
  
<mode name="packages_for_auto_pushing_into_channel" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="cid, eid">
SELECT P.id
FROM rhnPackage P,
  rhnErrataPackage EP
WHERE EP.errata_id = :eid
  AND EP.package_id = P.id
  AND P.id NOT IN
  (SELECT P1.id
FROM rhnPackage P1,
     rhnPackageEVR PE1, 
     rhnChannelNewestPackage CNP, 
     rhnPackageEVR PE2, 
     rhnPackageName PN, 
     rhnErrataPackage EP
WHERE EP.errata_id = :eid
  AND P1.id = EP.package_id
  AND CNP.channel_id = :cid
  AND P1.name_id = CNP.name_id
  AND p1.package_arch_id = CNP.package_arch_id
  AND PE1.id = P1.evr_id
  AND PE2.id = CNP.evr_id
  AND PN.id = P1.name_id
  AND rpm.vercmp(PE1.epoch, PE1.version, PE1.release, PE2.epoch, PE2.version, PE2.release) > 0)
  </query>
</mode>

<mode name="server_packages_needing_update">
  <query params="sid, name">
SELECT P.id, PE.epoch, PE.version, PE.release
  FROM rhnPackageEVR PE, rhnPackageName PN, rhnPackage P, rhnServerNeededPackageCache SNPC
 WHERE SNPC.server_id = :sid
   AND P.id = SNPC.package_id
   AND PN.id = P.name_id
   AND PN.name = :name
   AND PE.id = P.evr_id
  </query>
</mode>

<write-mode name="schedule_pkg_for_delete">
  <query params="path">
    INSERT INTO rhnPackageFileDeleteQueue
      VALUES (:path, sysdate)
  </query>
</write-mode>

<write-mode name="insert_channel_packages_in_set">
  <query params="cid, set_label, user_id">
    INSERT ALL INTO rhnChannelPackage(channel_id, package_id) VALUES (:cid, pid)
    select element  as pid
    from rhnSet S 
    	where S.user_id = :user_id and
    			S.label = :set_label
  </query>
</write-mode>


<mode name="packages_by_name">
<query params="package_name, org_id">
SELECT NVREA, PACKAGE_ID, CHANNEL_NAME, CHANNEL_ID
  FROM (SELECT DISTINCT
               PE.evr AS EVR,
               PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA,
               C.name AS CHANNEL_NAME,
               P.ID AS PACKAGE_ID,
               C.id AS CHANNEL_ID
          FROM rhnPackageArch PA,
               rhnChannel C,
               rhnPackageName PN,
               rhnPackageEVR PE,
               rhnPackage P,
               rhnChannelPackage CP,
               rhnAvailableChannels AC
         WHERE AC.org_id = :org_id
           AND PN.name = :package_name
           AND PN.id = P.name_id
           AND PE.id = P.evr_id
           AND AC.channel_id = CP.channel_id
           AND AC.channel_arch_id IN (SELECT id FROM rhnChannelArch WHERE label IN (%s))
           AND P.id = CP.package_id
           AND C.id = AC.channel_id
           AND PA.id = P.package_arch_id
        )
ORDER BY CHANNEL_NAME DESC, EVR DESC

</query>
</mode>

<mode name="packages_by_name_smart">
<query params="package_name, org_id">
<!-- This uses an inline view to filter away the PE.evr since
     DBD Oracle can't handle an Oracle object in the return results of a
     query.
-->
<!-- AC.current_members > 0 is used here. -->
SELECT NVREA, PACKAGE_ID, CHANNEL_NAME, CHANNEL_ID
  FROM (SELECT DISTINCT
               PE.evr AS EVR,
               PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA,
               C.name AS CHANNEL_NAME,
               P.ID AS PACKAGE_ID,
               C.id AS CHANNEL_ID
          FROM rhnPackageArch PA,
               rhnChannel C,
               rhnPackageName PN,
               rhnPackageEVR PE,
               rhnPackage P,
               rhnChannelPackage CP,
               rhnAvailableChannels AC
         WHERE AC.org_id = :org_id
           AND PN.name = :package_name
           AND PN.id = P.name_id
           AND PE.id = P.evr_id
           AND AC.channel_id = CP.channel_id
           AND AC.current_members > 0
           AND P.id = CP.package_id
           AND C.id = AC.channel_id
           AND PA.id = P.package_arch_id
        )
ORDER BY CHANNEL_NAME DESC, EVR DESC
</query>
</mode>

<mode name="packages_by_name_clabel">
<query params="package_name, org_id">
<!-- This uses an inline view to filter away the PE.evr since
     DBD Oracle can't handle an Oracle object in the return results of a
     query.
-->

SELECT NVREA, PACKAGE_ID, CHANNEL_NAME, CHANNEL_ID
  FROM (SELECT DISTINCT
               PE.evr AS EVR,
               PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA,
               C.name AS CHANNEL_NAME,
               P.ID AS PACKAGE_ID,
               C.id AS CHANNEL_ID
          FROM rhnPackageArch PA,
               rhnChannel C,
               rhnPackageName PN,
               rhnPackageEVR PE,
               rhnPackage P,
               rhnChannelPackage CP,
               rhnAvailableChannels AC
         WHERE AC.org_id = :org_id
           AND PN.name = :package_name
           AND PN.id = P.name_id
           AND PE.id = P.evr_id
           AND AC.channel_id = CP.channel_id
           AND AC.channel_label = 'redhat-linux-i386-8.0'
           AND P.id = CP.package_id
           AND C.id = AC.channel_id
           AND PA.id = P.package_arch_id
        )
ORDER BY CHANNEL_NAME DESC, EVR DESC
</query>
</mode>

<mode name="patchsets_in_channel" class="com.redhat.rhn.frontend.dto.PatchSetOverview">
  <query params="cid">
SELECT P.id AS ID,
       PN.name,
       PN.name || '-' || PE.evr.as_vre_simple() AS NVRE,
       P.summary,
       PA.label AS ARCH,
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA,
       TO_CHAR(SP.set_date, 'YYYY-MM-DD') AS set_date
  FROM rhnPackageArch PA, rhnPackageName PN, rhnPackageEVR PE, rhnPackage P,
       rhnChannelPackage CP, rhnSolarisPatchSet SP
 WHERE CP.channel_id = :cid
   AND CP.package_id = P.id
   AND P.name_id = PN.id
   AND P.evr_id = PE.id
   AND PA.id = P.package_arch_id
   AND P.id = SP.package_id
ORDER BY UPPER(NVRE)
  </query>
</mode>

<mode name="packages_for_channel_from_channel" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="cid, scid">
SELECT distinct P.id AS ID,
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA       
  FROM rhnPackage P inner join
  	   rhnPackageArch PA on P.package_arch_id = PA.id inner join
  	   rhnPackageName PN on P.name_id = PN.id inner join 
  	   rhnPackageEVR PE on P.evr_id = PE.id inner join 
       rhnChannelPackage CP on CP.package_id = P.id  inner join       
       rhnChannelPackageArchCompat CPAC on CPAC.package_arch_id = P.package_arch_id inner join
       rhnChannelArch CA2 on CPAC.channel_arch_id = CA2.id inner join
       rhnChannel C2 on C2.channel_arch_id = CA2.id
 WHERE  CP.channel_id = :scid and
 		C2.id = :cid  and 
 		not exists (	
 			select P.id 
            from rhnChannelPackage CP2 inner join
             rhnPackage P2 on CP2.package_id = P2.id
 			where CP2.channel_id = :cid and
 				P2.name_id = PN.id and
 				P2.evr_id = PE.id and
 				P2.package_arch_id = PA.id
 		) 

  </query>
    <elaborator name="package_details" />
</mode>

<mode name="custom_packages_for_channel" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="cid, org_id">
SELECT distinct P.id AS ID,
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA       
  FROM rhnPackage P inner join
  	   rhnPackageArch PA on P.package_arch_id = PA.id inner join
  	   rhnPackageName PN on P.name_id = PN.id inner join 
  	   rhnPackageEVR PE on P.evr_id = PE.id 
 WHERE  P.org_id = :org_id and
 		not exists (	
 			select P.id 
            from rhnChannelPackage CP2 inner join
             rhnPackage P2 on CP2.package_id = P2.id
 			where CP2.channel_id = :cid and
 				P2.name_id = PN.id and
 				P2.evr_id = PE.id and
 				P2.package_arch_id = PA.id
 		)
  </query>
    <elaborator name="package_details" />
</mode>


<mode name="orphan_packages_for_channel" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="cid, org_id">
SELECT distinct P.id AS ID,
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA       
  FROM rhnPackage P inner join
  	   rhnPackageArch PA on P.package_arch_id = PA.id inner join
  	   rhnPackageName PN on P.name_id = PN.id inner join 
  	   rhnPackageEVR PE on P.evr_id = PE.id left join
  	   rhnChannelPackage CP on P.id = CP.package_id
 WHERE  (P.org_id = :org_id) and
 		CP.channel_id is null and
 		not exists (	
 			select P.id 
            from rhnChannelPackage CP2 inner join
             rhnPackage P2 on CP2.package_id = P2.id
 			where CP2.channel_id = :cid and
 				P2.name_id = PN.id and
 				P2.evr_id = PE.id and
 				P2.package_arch_id = PA.id
 		)
  </query>
    <elaborator name="package_details" />
</mode>


<mode name="orphan_packages" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="org_id">
SELECT distinct P.id AS ID,
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA
  FROM rhnPackage P inner join
	   rhnPackageArch PA on P.package_arch_id = PA.id inner join
	   rhnPackageName PN on P.name_id = PN.id inner join
	   rhnPackageEVR PE on P.evr_id = PE.id left join
	   rhnChannelPackage CP on CP.package_id = P.id
 WHERE  P.org_id = :org_id and
		CP.package_id is null
  </query>
    <elaborator name="package_details" />
</mode>


<mode name="all_custom_packages" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="org_id">
SELECT distinct P.id AS ID,
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA
  FROM rhnPackage P inner join
	   rhnPackageArch PA on P.package_arch_id = PA.id inner join
	   rhnPackageName PN on P.name_id = PN.id inner join
	   rhnPackageEVR PE on P.evr_id = PE.id
 WHERE  P.org_id = :org_id
  </query>
    <elaborator name="package_details" />
    <elaborator name="package_channels" />
</mode>


<mode name="custom_package_in_channel" class="com.redhat.rhn.frontend.dto.PackageOverview">
  <query params="cid, org_id">
SELECT distinct P.id AS ID,
       PN.name || '-' || PE.evr.as_vre_simple() || '.' || PA.label AS NVREA
  FROM rhnPackage P inner join
	   rhnPackageArch PA on P.package_arch_id = PA.id inner join
	   rhnPackageName PN on P.name_id = PN.id inner join
	   rhnPackageEVR PE on P.evr_id = PE.id left join
	   rhnChannelPackage CP on P.id = CP.package_id
 WHERE  (P.org_id = :org_id) and
		CP.channel_id = :cid
  </query>
    <elaborator name="package_details" />
</mode>



<write-mode name="cleanup_needed_package_cache">
  <query params="pid">
    DELETE from
    rhnServerNeededPackageCache r
    WHERE r.package_id = :pid
  </query>
</write-mode>

<mode name="guestimate_package_by_channel" >
  <query params="cid, nameId, evrId">
	SELECT P.id
	  FROM rhnPackage P,
	       rhnChannelPackage CP
	 WHERE CP.channel_id = :cid
	   AND P.id = CP.package_id
	   AND P.name_id = :nameId
	   AND P.evr_id = :evrId
	ORDER BY P.package_arch_id
  </query>
</mode>

<mode name="guestimate_package_by_system" >
  <query params="sid, nameId, evrId">
SELECT P.id
  FROM
       rhnServerPackageArchCompat SPAC,
       rhnServer S,
       rhnServerChannel SC,
       rhnChannelPackage CP,
       rhnPackage P
 WHERE S.id = :sid
   AND P.name_id = :nameId
   AND P.evr_id = :evrId
   AND p.id = cp.package_id
   and cp.channel_id = sc.channel_id
   AND SC.server_id = S.id
   AND S.server_arch_id = SPAC.server_arch_id
   AND SPAC.package_arch_id = P.package_arch_id
ORDER BY P.package_arch_id DESC
  </query>
</mode>

<mode name="guestimate_package_by_system_arch" >
  <query params="sid, nameId, evrId, archId">
SELECT P.id
  FROM
       rhnServerPackageArchCompat SPAC,
       rhnServer S,
       rhnServerChannel SC,
       rhnChannelPackage CP,
       rhnPackage P
 WHERE S.id = :sid
   AND P.name_id = :nameId
   AND P.evr_id = :evrId
   AND P.package_arch_id = :archId
   AND p.id = cp.package_id
   and cp.channel_id = sc.channel_id
   AND SC.server_id = S.id
   AND S.server_arch_id = SPAC.server_arch_id
   AND SPAC.package_arch_id = P.package_arch_id
ORDER BY P.package_arch_id DESC
  </query>
</mode>
</datasource_modes>
