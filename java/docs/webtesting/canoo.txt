OBJECTIVE
----------

WEB CLIENT TEST TOOLS
----------------------
Canoo Webtest

Creating Tests
---------------
1) Here is a sample test that will log into RHN and verifies that
   the first page is "Users - User List", then logs out.

<project name="SimpleTest" basedir="." default="main">
  <property name="webtest.home" location="/home/devel/jesusr/dev/java/canoo/" />

  <taskdef file="${webtest.home}/webtestTaskdefs.properties">
    <classpath>
      <fileset dir="${webtest.home}" includes="**/lib/*.jar"/>
    </classpath>
  </taskdef>

  <target name="main">
    <testSpec name="myTest">
      <config host="transam.devel.redhat.com"
              port="8080"
              protocol="http"
              basepath="" />
      <steps>
        <invoke stepid="get Login Page"
             url="Login.do" />
        <verifytitle stepid="we should see the login title"
            text="Red Hat Network - Sign In" />
        <setinputfield name="username"
            value="hahtcommerce" />
        <setinputfield name="password"
            value="hahthaht" />
        <clickbutton label="   Sign In  " />
        <verifytitle text="Red Hat Network - Users - User List" />
        <clicklink label="Sign Out" href="Logout.do" />
        <verifytitle stepid="we should see the login title"
            text="Red Hat Network - Sign In" />
      </steps>
    </testSpec>
  </target>
</project>

2) Each test is its own ant file.
3) The samples included in Canoo have a TestSuite.xml ant file which
   does an ant antfile="testname.xml" /> for EACH test.  If we were
   to go with Canoo, we'd have to modify our build system to look
   through a webtest directory looking for xxxTest.xml and call
   <ant antfile="xxxTest.xml"/> or something like that.

Pros
----
- allows testing of website externally with out deploying a test application.
- uses basic ANT files
- has a complete set of tasks that allows for traversing a site and verifying
  proper information. http://webtest.canoo.com/webtest/manual/syntax.html
- can create test modules.  For example here's a login sample and how to
  call it from another test.

  modules/login.xml
      <invoke stepid="goto start page" url="${start.page}" />
      <setinputfield stepid="set user name"
                     name="username"
                     value="${user}" />
      <setinputfield stepid="set password"
                     name="password"
                     value="${login.ok.password}" />
      <clickbutton stepid="Click the submit button"
                   label="login" />
      <verifytitle stepid="Home Page folows if login ok"
                   text="${login.ok.title}" />


  UseCases/LoginAndStep.xml

  <!DOCTYPE project [
     <!ENTITY login SYSTEM "file:../modules/login.xml">
  ]>

  <project ...>
     ...
     <steps>
        &login;
     </steps>
     ...
  </project>


Cons
----
- uses basic ANT files
- tests could become verbose, but this can be minimized by reuse.
