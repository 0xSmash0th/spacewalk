
Rate of change vs. absolute change

   In general, it is more useful to compute the the rate of events rather than
   the number of events.  An example would be the number of collisions on
   an interface.  Recording collisions per second is more useful than recording
   the number of collisions since reboot.

Counter wraps

   32 bit counters can wrap fairly quickly.  If one tick of the counter
   represents an octet through an interface, a 100 MB/s stream through that
   interface will wrap the counter in 41 seconds.  If a 64 bit version of the
   counter is available, that is preferred.  A 64 bit counter counting octets
   of the same 100 MB/s stream will wrap every 5500 years.

   Unless a probe can know exactly how many times a counter has wrapped
   between reads, and in the absence of knowledge about the absolute maximum
   rate at which a counter can increase, it is impossible to determine how
   many times a counter has wrapped between probes.  But given a few
   assumptions, we can neglect this uncertainty.

   A probe runs at time t2 and observes the counter with value c2.  Let's call
   the values from the last probe execution t1 and c1.

   Here's the basic outline:

   if( ( defined $t1 ) and ( defined $c1 ) and ($t2 > $t1) )
   {
      my $rate;
      if( $c2 >= $c1 )
      {
         $rate = ($c2 - $c1)/($t2 - $t1);
      }
      else
      {
         $rate = ($c2 - $c1 + MAX_COUNTER_VALUE)/($t2 - $t1);
      }
   }

   $self->recordResult($metric, ..., $rate, $t2);

   # then store $t2 and $c2 for use as $t1 and $c2 for the next iteration

   This should work in almost every case.  There are some exceptions:

   The process being measured is incrementing the counter so fast that it
   has wrapped around the top, and all the way through c1 in the time
   between t1 and t2.  Or perhaps it has wrapped more than once.

   The counter was reset sometime between t1 and t2, possibly due to a reboot.

Division by zero or undef

   Don't do it

Precision

   Metrics measured in whole units should use as all available precision,
   down to the single unit.

   Metrics measured in parts of a whole should record no more than 4
   significant digits.

Units

   The QUANTA table defines a preferred unit for each quantum in the 
   BASIC_UNIT_ID field.  If possible, metrics should be recorded in these
   units.

Probe environment

   Probes should assume that all required executables are in nocpulsed's PATH

   What about screen width?

Parsing output from commands

   Output of unix commands may change units in order to fit the data into
   one screen width.  For instance, a large filesystem may report free space
   in MB, while the same command may report the free space of a larger
   filesystem in GB.  Be sure to check your assumptions.

   Sometimes columns run together, which means that splitting on whitespace
   won't work.

Probe::addStatusString()

   Should not contain timeseries information.

Detecting multiple problems

   What if several different problems are detected?  setStatus() should
   record the worst.  The string supplied addStatusString() will vary
   by probe.
