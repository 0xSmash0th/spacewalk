package PerlModules::NP::DocGen::CustomPod;

use strict;

use Marek::Pod::HTML qw(pod2html);
use vars qw(@ISA @EXPORT @EXPORT_OK);
use Data::Dumper;

require Exporter;
@ISA = qw(Marek::Pod::HTML);
@EXPORT_OK = qw(&pod2html);

my $NBSP = HTML::Entities::decode_entities('&nbsp;');

sub customize {
    my ($self, $name) = @_;

#    $self->SUPER::customize($name);

    # Add the stylesheet.
    $self->{_head}->push_content(HTML::Element->new('link', 
                                                    rel  => "stylesheet",
                                                    href => "/perldoc/pod.css",
                                                    type => "text/css"));
    # Set up the method summary right after the METHODS header.
    $self->add_method_summary($self->find_header('METHODS'));

    # Add a link to the source code in the SEE ALSO section.
    $self->add_source_link($name, $self->find_header('SEE_ALSO'));

    $self->customize_main_elements($name);
}

# Copied from Marek::Pod::HTML::customize
sub customize_main_elements {
    my ($self, $name) = @_;

    # set document class
    my $root =  HTML::Element->new('~declaration', text => 
      'DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"');
    $root->push_content("\n", $self->{_html});
    $self->{_html} = $root;

    # customize the title
    my $title = HTML::Element->new('title');
    $title->push_content($self->{-title} || $name || 'POD');
    $self->{_head}->push_content($title, "\n");

    # prepend big heading
    if($name) {
        my $titleh = HTML::Element->new('h1', CLASS => 'POD_TITLE');
        $titleh->push_content($name);
        $self->{_body}->unshift_content("\n",$titleh,"\n",
            HTML::Element->new('hr'));
    }

    if($self->{-navigation}) {
        # add navigation
        my $table = HTML::Element->new('table', width => '100%');
        $self->{_body}->unshift_content("\n",$table);

        my $tr = HTML::Element->new('tr');
        $table->push_content("\n", $tr, "\n");
        if ($self->{-toc} || $self->{-idx}) {
            my $td = HTML::Element->new('td', class => 'POD_NAVBAR');
            $tr->push_content($td, "\n");

            if($self->{-toc}) {
                my $anchor = $self->navbar_href($self->{-tocname}, $self->{-toctitle});
                $self->{_toc_link_element} = $anchor->clone();
                $td->push_content("\n", $anchor, $NBSP, $NBSP);
            }

            if($self->{-idx}) {
                my $anchor = $self->navbar_href($self->{-idxname}, $self->{-idxtitle});
                $self->{_idx_link_element} = $anchor->clone();
                $td->push_content($anchor, $NBSP, $NBSP);
            }

            # Custom crosslinks between CPAN and NOCpulse
            if($self->{-toctitle} =~ /CPAN/) {
                my $anchor = $self->navbar_href('/perldoc/nocpulse/np-toc', 'NOCpulse');
                $td->push_content($anchor, "\n");

            } elsif($self->{-toctitle} =~ /NOCpulse/) {
                my $anchor = $self->navbar_href('/perldoc/cpan/PerlModules/CPAN/cpan-toc', 'CPAN');
                $td->push_content($anchor, "\n");
            }
        }

    } # end navigation

    # for finding the way back to the top
    my $anchor = HTML::Element->new('a', CLASS => 'POD_NAVLINK',
        name => 'Pod_TOP_OF_PAGE');
    $self->{_body}->unshift_content("\n", $anchor);

    # customize the footer
    $anchor = HTML::Element->new('a', CLASS => 'POD_NAVLINK',
        href => '#Pod_TOP_OF_PAGE');
    $anchor->push_content('Top');
    $self->{_body}->push_content(['hr'],
                                 "\n",
                                 $anchor,
                                 $NBSP, $NBSP,
                                 $self->{_toc_link_element},
                                 $NBSP, $NBSP,
                                 $self->{_idx_link_element},
                                 $NBSP, $NBSP,
                                 ['span', { class => 'POD_VERSION_FOOTER' },
                                  " \nGenerated by Pod::HTML ",
                                  $Marek::Pod::HTML::VERSION,
                                  " on " . localtime() . "\n",
                                 ]);
}

sub navbar_href {
    my ($self, $filename, $title) = @_;

    my $href_file = _construct_file_name($filename, $self->depth(), $self->{-suffix});
    my $anchor = HTML::Element->new('a', CLASS => 'POD_NAVLINK', href => $href_file);
    $title =~ s/\s+/$NBSP/g;
    $anchor->push_content(['span', { class => 'POD_TEXT' }, $title]);

    return $anchor;
}

sub _construct_file_name {
    return Marek::Pod::HTML::_construct_file_name(@_);
}

sub find_header {
    my ($self, $name) = @_;
    my $index = -1;
    foreach my $el ($self->{_body}->content_list()) {
        ++$index;
        next unless ref($el) && $el->tag eq 'h2';
        my $content = ($el->content_list())[0];
        if (ref($content) && $content->tag eq 'a' && $content->attr('name') eq $name) {
            return ($el, $index);
        }
    }
    return undef;
}

sub add_source_link {
    my ($self, $name, $see_also_header, $element_index) = @_;

    # Bail unless there's an underlying .pm around
    return unless -e _construct_file_name($name, 0, '.pm');

    my $anchor = HTML::Element->new('a', CLASS => 'POD_NAVLINK',
                                    href => _construct_file_name($name,
                                                                 $self->depth(),
                                                                 '.pm'));
    $anchor->push_content('Source code');

    unless ($see_also_header) {
        my $see_also_header = HTML::Element->new('h2', class => 'POD_HEAD1',
                                                 name => 'SEE_ALSO');
        $see_also_header->push_content(['a', { name => "SEE_ALSO" }, "SEE ALSO", ]);
        $self->{_body}->push_content($see_also_header,
                                     ['p', { class => 'POD_TEXT' },
                                      "\n", $anchor, "\n" ]);
    } else {
        my @elements = $self->{_body}->content_list();
        foreach my $item (@elements[$element_index .. scalar(@elements)]) {
            next unless ref($item) && $item->tag eq 'p';
            $item->unshift_content("\n", $anchor, HTML::Element->new('br'), "\n");
            last;
        }
    }
}

sub add_method_summary {
    my ($self, $method_header, $element_index) = @_;

    return unless $method_header;

    my $method_summary = HTML::Element->new('table');
    $method_header->postinsert("\n", $method_summary, "\n");

    $method_summary->push_content(['tr',
                                   ['td', { class => 'POD_METHOD_SUMMARY_HEADER' },
                                    'Summary'
                                   ],
                                  ]);

    my @elements = $self->{_body}->content_list();

    foreach my $item (@elements[$element_index .. scalar(@elements)]) {

        next unless ref($item) && $item->tag eq 'dl';

        # Gather up the dt elements.
        my %methods = ();
        foreach my $dl_entry ($item->content_list) {
            next unless ref($dl_entry) && $dl_entry->tag eq 'dt';
            my $method_element = ($dl_entry->content_list())[0];
            $methods{$method_element->attr('name')} = $method_element;
        }

        # Generate the table of method call summaries sorted by name.
        foreach my $method_target (sort keys %methods) {
            my $method_element = $methods{$method_target};
            my $method_call    = $method_element->as_text();

            my $tag = HTML::Element->new('a', href => '#' . $method_target);
            $method_summary->push_content
              (['tr', "\n",
                ['td', { class => 'POD_METHOD_SUMMARY' },
                 $method_call,
                ], "\n",
                ['td', { class => 'POD_METHOD_SUMMARY' },
                 ['a', { href => '#' . $method_target }, "view" ],
                ], "\n",
               ], "\n",
              );
        }
        last;
    }
}

1;
