package NOCpulse::Probe::Overview;

1;

__END__

=head1 NAME

  NOCpulse::Probe::Overview - Overview of the probe framework

=head1 SYNOPSIS

 # A Unix check

 package Unix::Load;
 use strict;
 sub run {
    my %args = @_;

    my $result = $args{result};
    my %params = %{$args{params}};

    my $command = $args{data_source_factory}->unix_command(%params);

    my $uptime = $command->uptime();

    if ($uptime->found) {
        $result->metric_value('load1', $uptime->one_minute_load, '%.2f');
        $result->metric_value('load5', $uptime->five_minute_load, '%.2f');
        $result->metric_value('load15', $uptime->fifteen_minute_load, '%.2f');
    } else {
        $result->item_unknown('Cannot calculate load from "' . $command->results . '"');
    }
 }


 # A Windows check

 package Windows::PagingFileUsage;
 use strict;
 use NOCpulse::Probe::DataSource::WindowsCommand;
 sub run {
    my %args = @_;

    my $result = $args{result};
    my %params = %{$args{params}};
    my $instance = $params{instance};

    my $command = $args{data_source_factory}->windows_command(%params);

    my $paging_file_usage = $command->perf_data('Paging File', '% Usage', $instance);

    if (defined($paging_file_usage)) {

        $result->context("Paging File instance $instance");

        $result->metric_value('pctused', $paging_file_usage);

    } else {
        $result->user_data_not_found('Instance', $instance);
    }
 }


 # An Oracle check

 package Oracle::Locks;
 use strict;
 sub run {
    my %args = @_;

    my $result  = $args{result};
    my %params  = %{$args{params}};

    my $ora = $args{data_source_factory}->oracle(%params);

    my $row = $ora->fetch_first(q{
				  select count(*) as LOCKS from v$lock
				 }, ['V$LOCK']);

    $result->context("Instance $params{ora_sid}");
    my $pins  = $result->metric_value('locks', $row->{LOCKS}, '%d');
 }


 # An SNMP check

 package Cisco::RouterTemperature;
 use strict;
 use NOCpulse::Probe::SNMP::MibEntryList;

 my @entries = 
  (
   { name      => 'ciscoEnvMonTemperatureStatusDescr',
     label     => 'Router',
     oid       => '1.3.6.1.4.1.9.9.13.1.3.1.2',
     data_type => 'OCTET_STRING',
     is_index  => 1,
     match_any => 1,
   },
   { name      => 'ciscoEnvMonTemperatureStatusValue',
     oid       => '1.3.6.1.4.1.9.9.13.1.3.1.3',
     data_type => 'INTEGER',
     metric    => 'temp',
   },
  );

 sub run {
    my %args = @_;
    my $oid_list = NOCpulse::Probe::SNMP::MibEntryList->new(@entries);
    $oid_list->run(%args);
 }


=head1 DESCRIPTION

Probes use their Result object to record metrics and values for items
that are not metrics but are still of interest. The Result object
manages threshold and notification decisions and message
formatting.

Probes can record any number of items or metrics. The status for each
is recorded separately, so that changes for individual items can
trigger alerts and status changes.

=head1 SEE ALSO


=cut
