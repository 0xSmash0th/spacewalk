---------------------------
NOCPULSE UNIT TESTING HOWTO
---------------------------


SETUP
-----

  1) Installation

    First, install the latest versions of the following RPMs:

      Class-MethodMaker (>= 1.05.1-2)
      Error             (>= 1.1.0-1)
      Test-Unit         (>= 0.14-2)
      NPusers           (>= 1.10.1-0)
      NOCpulse-Utils    (>= 1.10.0-2)
      NOCpulse-Debug    (>= 1.19.0-0)

      For instance:
rpm -i http://outhaul.lab.nocpulse.net/buildRelease/archive/Class-MethodMaker-1.05.1-2.noarch.rpm
rpm -i http://outhaul.lab.nocpulse.net/buildRelease/archive/Error-1.1.0-1.noarch.rpm
rpm -i http://outhaul.lab.nocpulse.net/buildRelease/archive/Test-Unit-0.14-2.noarch.rpm
rpm -i http://outhaul.lab.nocpulse.net/buildRelease/archive/NPusers-1.10.1-0.noarch.rpm
rpm -i http://outhaul.lab.nocpulse.net/buildRelease/archive/NOCpulse-Utils-1.10.0-2.noarch.rpm
rpm -i http://outhaul.lab.nocpulse.net/buildRelease/archive/NOCpulse-Debug-1.19.0-0.noarch.rpm

  2) Create a test directory

    In the directory with the module you want to test (e.g. Blah.pm),
    create a directory called 'test':

      mkdir test


  3) Create a test module

    The test module lives in the 'test' directory and has a name of the 
    form "TestBlah.pm".  The module should look like this:

      package test::TestBlah;

      use strict;

      use base qw(Test::Unit::TestCase);

      use Blah;

      my $MODULE = 'Blah';


      ######################
      sub test_constructor {
      ######################
        my $self = shift;

        my $obj = $MODULE->new();

        # Make sure creation succeeded
        $self->assert(defined($obj), "Couldn't create $MODULE object: $@");

        # Make sure we got the right type of object
        $self->assert(qr/$MODULE/, "$obj");

        
      }

      # INSERT INTERESTING TESTS HERE

      1;


  4) Test your test

    Now do a dry run with the test suite above to make sure everything
    is there and working as you expect.  Use the 'runtest.pl' script (in
    /opt/home/nocpulse/bin, provided by the NOCpulse-Utils RPM) to run the 
    test:

      myhost.1> ~nocpulse/bin/runtest.pl test/TestBlah.pm

      test::TestBlah
              test_constructor: 

      Time:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)

      OK (1 tests)


  And that's it!  Now you're ready to write some real unit tests.



UNIT TESTING
------------

  From here on out, TestBlah.pm is your safety net.  Every time you add
  functionality to Blah.pm, test it in TestBlah.pm.  (In dogmatic XP,
  you write your test *before* you add the functionality; in real life,
  it's often convenient to write them in parallel.)  Not only does this
  ensure that every bit of functionality is tested, but it helps
  solidify your thinking when designing the interface.

  Test cases in TestBlah.pm are simply methods with names starting in
  'test_'.  Within the test cases, use $self->assert() to ensure that
  expected conditions are met.  There are three different invocations
  of asssert:

    a) Boolean assertion
      $self->assert(<boolean>[,<message>]);

    b) Pattern match
      $self->assert(qr/<pattern>/, <string>);

    c) Subroutine invocation
      $self->assert(sub {<subroutine>}, <args>);

  Finally, the $self->fail() method allows you to bail out if you hit
  a section of code you shouldn't have.

    $self->fail(); # Should not have gotten here
    

  Example
  -------

  Say you want to add a sort_by_numeric_value() function to Blah.pm that
  takes a hash with numeric values, sorts it numerically by value, and
  returns the sorted keys.  First, write the test case in TestBlah.pm:


    ################################
    sub test_sort_by_numeric_value {
    ################################
      my $self = shift;

      # Create a blah object
      my $blah = $MODULE->new();

      # Create a sortable hash
      my %hash = (
        three => 3,
        Four  => 4,
        1     => 1,
        TWO   => 2,
      );

      # Sort the hash using $blah
      my @sortkeys = $blah->sort_by_numeric_value(\%hash);

      # Make sure the hash is sorted correctly.
      for (my $i = 0; $i < keys %hash; $i++) {
        my $exp = (qw(1 TWO three Four))[$i]; # manually sorted :)
        $self->assert($sortkeys[$i] == $exp, 
                       "Bad sort($i): expected $exp, got $sortkeys[$i]");
      }
    }


  Next, create the method in Blah.pm:


    ###########################
    sub sort_by_numeric_value {
    ###########################
      my $self = shift;
      my $ary  = shift;

      return sort {$ary->{$a} <=> $ary->{$b}} keys %$ary;
    }


  Then test the new functionality:


    myhost.2> ~nocpulse/bin/runtest.pl test/TestBlah.pm

    test::TestBlah
            test_constructor: 
            test_sort_by_numeric_value: 

    Time:  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)

    OK (2 tests)

  
  OK, the test appears to work.  But remember, the tests are your safety
  net; you're going to be leaning on them heavily, so you need to be
  absolutely sure they work.  Test the test by intoducing a bug in your 
  code to make sure the test will catch it.  In this case, you could do:


    ###########################
    sub sort_by_numeric_value {
    ###########################
      my $self = shift;
      my $ary  = shift;

      return sort {$ary->{$b} <=> $ary->{$a}} keys %$ary;
      #                   ^^- backwards -^^
    }
  
  Then run the test again:


    myhost.3> ~nocpulse/bin/runtest.pl test/TestBlah.pm

    test::TestBlah
            test_constructor: 
            test_sort_by_numeric_value: ASSERTION FAILURE: Test::Unit::ExceptionFailure:
    Bad sort(0): expected 1, got Four


    Time:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)

    THERE WERE FAILURES
    Ran 2 tests with 1 assertion  failure and 0 errors
    1) test_sort_by_numeric_value(test::TestBlah)
    Test::Unit::ExceptionFailure:
    Bad sort(0): expected 1, got Four

    Test was not successful

  Bingo!  The test works, and the function works.  More important, you 
  can be sure the function will continue to work, even if you do radical
  refactoring on Blah.pm, as long as the tests run clean.  (I am 
  Programmer, hear me roar! :)

  BUT WE'RE NOT DONE YET!!!  Now that you've got a working example
  using sort_by_numeric_value(), add it to the perldoc at the end of
  Blah.pm.  By documenting methods as your test them (and testing them
  as you write them), you ensure that all of your methods are documented
  thoroughly and correctly.


  [AUTHOR'S NOTE:  It's difficult to document the "parallel development"
  of the test cases and the code being tested, but you'll quickly see 
  what I mean.  Even in writing this trivial example, the test informed
  the code and vice versa.  I was going to pass %hash as a hash instead
  of a hashref, but it occurred to me while writing the test that it
  might be large.  When I wrote the test case, I called the function
  '$blah->sort_by_value()', but when I wrote the function I had to 
  decide whether to sort numerically or lexographically, which changed
  the test case.  Doing parallel development gives you both sides of
  the story.  XP rules!]



UNIT TESTS REFINED
------------------

  In the test above, the first line created a $blah object.  Since
  TestBlah.pm tests Blah.pm, that will be the first thing done in *all*
  of the tests.  Test::Unit::TestCase provides two methods to help
  streamline your testing:  set_up(), called before each individual
  test, and tear_down() called after each test.  So you can save yourself
  a little typing by adding the following:

    ############
    sub set_up {
    ############
      my $self = shift;
      # This method is called before each test.
      $self->{'blah'} = $MODULE->new();
    }

  You can then delete the constructor call from your test(s) (using 
  $self->{'blah'} instead) and run the test again to make sure you 
  didn't break anything.

    myhost.3> ~nocpulse/bin/runtest.pl test/TestBlah.pm

    test::TestBlah
            test_constructor: 
            test_sort_by_numeric_value: 

    Time:  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)

    OK (2 tests)



TEST SUITES
-----------

  runtest.pl supports test suites, which is to say you can have any
  number of test modules in the 'test' directory and ask runtest.pl
  to test them all.

  If you wanted to create a new subclass of Blah (called Flooz), you
  would start with the empty subclass test.  First, create Flooz.pm
  thus:

    package Flooz;

    use base qw(Blah);

    1;

  Then make a copy of TestBlah.pm named TestFlooz.pm, edit the file, and
  change all the "Blah"s to "Flooz"es.  To make sure the subclass
  behaves as it should, simply run all the tests in the directory.

    myhost.4> ~nocpulse/bin/runtest.pl test

      test::TestBlah
              test_constructor: 
              test_sort_by_numeric_value: 

      test::TestFlooz
              test_constructor: 
              test_sort_by_numeric_value: 

      Time:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)

      OK (4 tests)

  Now you've got a subclass that inherits all of the superclass's 
  behavior correctly, and you can start adding to or overriding the
  superclass's behavior with confidence.

  Aren't test cases fun?  :)  

