#!/usr/bin/python
#
# Licensed under the GNU General Public License Version 3
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Copyright 2010 Aron Parsons <aron@redhat.com>
#

""" spacecmd - a command line interface to Spacewalk """

import logging, os, sys, xml, xmlrpclib
from ConfigParser import SafeConfigParser
from optparse import Option, OptionParser
from pwd import getpwuid

sys.path.append('/usr/share/rhn')
from spacecmd.SpacewalkShell import SpacewalkShell

if __name__ == '__main__':
    optionsTable = [
        Option('-u', '--username', action='store',
               help='use this username to connect to the server'),
        Option('-p', '--password', action='store',
               help='use this password to connect to the server'),
        Option('-s', '--server', action='store',
               help='connect to this server [default: localhost]'),
        Option('--nocache', action='store_true',
                help='do not create a username/password cache'),
        Option('--nossl', action='store_true',
               help='use HTTP instead of HTTPS'),
        Option('--nohistory', action='store_true',
                help='do not store command history'),
        Option('-y', '--yes', action='store_true',
               help='answer yes for all questions'),
        Option('-q', '--quiet', action='store_true',
               help='print only error messages'),
        Option('-v', '--verbose', action='store_true',
               help='print informational messages'),
        Option('-d', '--debug', action='store_true',
               help='print debug messages'),
    ]

    usage = 'usage: %prog [options] [command]'
    parser = OptionParser(option_list=optionsTable, usage=usage)
    (options, args) = parser.parse_args()
    
    # enable debugging as early as possible
    if options.debug:
        level = logging.DEBUG

    userinfo = getpwuid(os.getuid())
    conf_dir = os.path.join(userinfo[5], '.spacecmd')
    conf_file = os.path.join(conf_dir, 'config')

    # load options from a configuration file
    if os.path.isfile(conf_file):
        config = SafeConfigParser()
        config.read(conf_file)    

        boolean_opts = [ 'verbose', 'nossl', 'debug' ]
        string_opts = [ 'server', 'username', 'password' ]

        for key in boolean_opts:
            if not options.__dict__[key]:
                try:
                    options.__dict__[key] = config.getboolean('spacecmd', key)
                except:
                    pass

        for key in string_opts:
            if not options.__dict__[key]:
                try:
                    options.__dict__[key] = config.get('spacecmd', key)
                except:
                    pass
    else:
        try:
            if not os.path.isdir(conf_dir):
                logging.debug('Creating %s' % conf_dir)
                os.mkdir(conf_dir, 0700)
            
            file = open(conf_file, 'w')
            file.write('[spacecmd]\n')
            file.close()
        except:
            logging.error('Could not create %s' % conf_file)

    # set the default server to localhost
    if not options.server:
        options.server = 'localhost'

    # reset the log level after parsing the config file
    if options.debug:
        level = logging.DEBUG
    elif options.verbose:
        level = logging.INFO
    elif options.quiet:
        level = logging.ERROR
    else:
        level = logging.WARNING

    logging.basicConfig(level=level, format='%(levelname)s: %(message)s')

    shell = SpacewalkShell(options)

    if len(args):
        try:
            # don't try to login when printing the help message
            if not 'help' in args: shell.preloop()

            # run a single command given on the command line
            shell.onecmd(shell.precmd(' '.join(args), True))
        except xmlrpclib.Fault, err:
            logging.debug(sys.exc_info())
            message = ' '.join(err.faultString.split(':')[1:])
            logging.error(message)
        except KeyboardInterrupt:
            print
    else:
        # stay in the interactive shell forever
        while True:
            # Python 2.4 doesn't have a try..except..finally, so
            # nest a try..except inside a try..finally
            try:
                try:
                    # our interactive shell
                    shell.cmdloop()
                except xmlrpclib.Fault, err:
                    try:
                        # try to format XML-RPC errors to look a bit nicer
                        logging.debug(sys.exc_info())
                        message = ' '.join(err.faultString.split(':')[1:])
                        logging.error(message)
                    except:
                        # a few XML-RPC messages are different
                        logging.error(err.faultString)
                except xml.parsers.expat.ExpatError:
                    logging.error(sys.exc_info()[1])
                    logging.debug(sys.exc_info())
                except KeyboardInterrupt:
                    # just cancel the current command on Ctrl+C
                    print
            finally:
                shell.intro = ''

# vim:ts=4:expandtab:
