#!/usr/bin/python

""" spacecmd - a command line interface to Spacewalk

Author: Aron Parsons <aron@redhat.com>
License: GPLv3
"""

import logging, os, sys, xml, xmlrpclib
from optparse import Option, OptionParser

sys.path.append('/usr/share/rhn')
from spacecmd.SpacewalkShell import SpacewalkShell

if __name__ == '__main__':
    optionsTable = [
        Option('-u', '--username', action='store',
               help='use this username to connect to the server'),
        Option('-p', '--password', action='store',
               help='use this password to connect to the server'),
        Option('-s', '--server', action='store', default='localhost',
               help='connect to this server [default: %default]'),
        Option('--nocache', action='store_true',
                help='do not create a username/password cache'),
        Option('--nossl', action='store_true',
               help='use HTTP instead of HTTPS'),
        Option('--nohistory', action='store_true',
                help='do not store command history in ~/.spacecmd_history'),
        Option('-y', '--yes', action='store_true',
               help='answer yes for all questions'),
        Option('-q', '--quiet', action='store_true',
               help='print only error messages'),
        Option('-v', '--verbose', action='store_true',
               help='print informational messages'),
        Option('-d', '--debug', action='store_true',
               help='print debug messages'),
    ]

    usage = 'usage: %prog [options] [command]'
    parser = OptionParser(option_list=optionsTable, usage=usage)
    (options, args) = parser.parse_args()

    if options.debug:
        level = logging.DEBUG
    elif options.verbose:
        level = logging.INFO
    elif options.quiet:
        level = logging.ERROR
    else:
        level = logging.WARNING

    logging.basicConfig(level=level, format='%(levelname)s: %(message)s')

    shell = SpacewalkShell(options)

    if len(args):
        try:
            # run a single command given on the command line
            shell.preloop()
            shell.onecmd(shell.precmd(' '.join(args), True))
        except xmlrpclib.Fault, err:
            logging.debug(sys.exc_info())
            logging.error(err.faultString.rsplit(': ', 1)[1])
    else:
        while True:
            try:
                shell.cmdloop()
            except xmlrpclib.Fault, err:
                shell.intro = ''

                try:
                    logging.debug(sys.exc_info())
                    logging.error(err.faultString.rsplit(': ', 1)[1])
                except:
                    # a few XML-RPC messages are different
                    logging.error(err.faultString)
            except xml.parsers.expat.ExpatError:
                shell.intro = ''
                logging.error(sys.exc_info()[1])
                logging.debug(sys.exc_info())
            except KeyboardInterrupt:
                shell.intro = ''
                print

# vim:ts=4:expandtab:
